[{"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\index.js":"1","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\App.js":"2","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\RegisterPage.js":"3","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\context\\use-auth.js":"4","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\HomePage.js":"5","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\services\\client.js":"6","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\LoginPage.js":"7","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\reportWebVitals.js":"8","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\Input.js":"9","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\routing\\PrivateRoute.js":"10","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\NotFound.js":"11","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\utils\\setAuthToken.js":"12","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\PasswordInput.js":"13","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\Layout.js":"14","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\Header.js":"15","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\UI\\LoadingSpinner.js":"16","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\AddDoctorDetails.js":"17","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\Select.js":"18","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\Button.js":"19","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\PatientListPage.js":"20","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\UI\\Modal.js":"21","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\UI\\Backdrop.js":"22","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\PrescriptionPage.js":"23","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\VideoCallPage.js":"24","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\videoCall\\Participant.js":"25","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\videoCall\\Room.js":"26","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\ChatPage.js":"27","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\CallLogPage.js":"28","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\CallLogCard.js":"29","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\DateTimeInput.js":"30","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\services\\socket.js":"31","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\ResetPasswordPage.js":"32","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\ForgotPasswordPage.js":"33"},{"size":469,"mtime":1612935527724,"results":"34","hashOfConfig":"35"},{"size":1791,"mtime":1613559586588,"results":"36","hashOfConfig":"35"},{"size":4475,"mtime":1613561852563,"results":"37","hashOfConfig":"35"},{"size":3954,"mtime":1613561530110,"results":"38","hashOfConfig":"35"},{"size":3311,"mtime":1613814674766,"results":"39","hashOfConfig":"35"},{"size":138,"mtime":1612937838477,"results":"40","hashOfConfig":"35"},{"size":4352,"mtime":1613561627649,"results":"41","hashOfConfig":"35"},{"size":362,"mtime":1606886196678,"results":"42","hashOfConfig":"35"},{"size":969,"mtime":1612933219433,"results":"43","hashOfConfig":"35"},{"size":443,"mtime":1612936776068,"results":"44","hashOfConfig":"35"},{"size":439,"mtime":1612951058953,"results":"45","hashOfConfig":"35"},{"size":251,"mtime":1612938552228,"results":"46","hashOfConfig":"35"},{"size":1246,"mtime":1613104033191,"results":"47","hashOfConfig":"35"},{"size":235,"mtime":1613037914716,"results":"48","hashOfConfig":"35"},{"size":1089,"mtime":1613467749512,"results":"49","hashOfConfig":"35"},{"size":272,"mtime":1612932227806,"results":"50","hashOfConfig":"35"},{"size":9526,"mtime":1613821701603,"results":"51","hashOfConfig":"35"},{"size":688,"mtime":1612953030861,"results":"52","hashOfConfig":"35"},{"size":322,"mtime":1612933214649,"results":"53","hashOfConfig":"35"},{"size":9300,"mtime":1613979179314,"results":"54","hashOfConfig":"35"},{"size":637,"mtime":1613027629282,"results":"55","hashOfConfig":"35"},{"size":278,"mtime":1613027244048,"results":"56","hashOfConfig":"35"},{"size":4394,"mtime":1613131068038,"results":"57","hashOfConfig":"35"},{"size":1623,"mtime":1613128972583,"results":"58","hashOfConfig":"35"},{"size":2923,"mtime":1613194297479,"results":"59","hashOfConfig":"35"},{"size":2067,"mtime":1613131046059,"results":"60","hashOfConfig":"35"},{"size":4713,"mtime":1613726849233,"results":"61","hashOfConfig":"35"},{"size":4825,"mtime":1613477925799,"results":"62","hashOfConfig":"35"},{"size":1301,"mtime":1613472225545,"results":"63","hashOfConfig":"35"},{"size":465,"mtime":1613475664031,"results":"64","hashOfConfig":"35"},{"size":206,"mtime":1613538831347,"results":"65","hashOfConfig":"35"},{"size":2475,"mtime":1613560798652,"results":"66","hashOfConfig":"35"},{"size":1950,"mtime":1613560487490,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1iylv84",{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"82"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"70"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"148"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\index.js",[],["151","152"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\App.js",["153"],"import React, { useEffect } from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport { Toaster } from 'react-hot-toast'\nimport { useAuth } from 'context/use-auth'\nimport PrivateRoute from 'routing/PrivateRoute'\n\nimport LoginPage from 'pages/auth/LoginPage'\nimport RegisterPage from 'pages/auth/RegisterPage'\nimport HomePage from 'pages/doctor/HomePage'\nimport PatientListPage from 'pages/doctor/PatientListPage'\nimport NotFound from 'pages/NotFound'\nimport PrescriptionPage from 'pages/doctor/PrescriptionPage'\nimport VideoCallPage from 'pages/doctor/VideoCallPage'\nimport ChatPage from 'pages/doctor/ChatPage'\nimport CallLogPage from 'pages/doctor/CallLogPage'\nimport ForgotPasswordPage from 'pages/auth/ForgotPasswordPage'\nimport ResetPasswordPage from 'pages/auth/ResetPasswordPage'\n\nconst App = () => {\n  const { loadUser } = useAuth()\n\n  useEffect(() => {\n    if (localStorage.token) {\n      loadUser()\n    }\n  }, [])\n\n  return (\n    <>\n      <Toaster />\n      <Switch>\n        <PrivateRoute exact path='/' component={HomePage} />\n        <PrivateRoute exact path='/patientList' component={PatientListPage} />\n        <PrivateRoute exact path='/prescription' component={PrescriptionPage} />\n        <PrivateRoute exact path='/video-call/:id' component={VideoCallPage} />\n        <PrivateRoute exact path='/chat/:id' component={ChatPage} />\n        <PrivateRoute exact path='/call-log' component={CallLogPage} />\n        <Route path='/register' component={RegisterPage} />\n        <Route path='/login' component={LoginPage} />\n        <Route path='/forgotPassword' component={ForgotPasswordPage} />\n        <Route path='/passwordreset/:token' component={ResetPasswordPage} />\n        <Route path='/*' component={NotFound} />\n      </Switch>\n    </>\n  )\n}\n\nexport default App\n",["154","155"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\RegisterPage.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\context\\use-auth.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\HomePage.js",["156"],"import React, { useEffect, useState } from 'react'\r\nimport { useAuth } from 'context/use-auth'\r\nimport client from 'services/client'\r\nimport toast from 'react-hot-toast'\r\n\r\nimport Layout from 'components/layouts/Layout'\r\nimport LoadingSpinner from 'components/shared/UI/LoadingSpinner'\r\nimport AddDoctorDetails from 'components/layouts/AddDoctorDetails'\r\n\r\nimport './HomePage.css'\r\n\r\nconst HomePage = () => {\r\n  const { loadUser, user } = useAuth()\r\n  const [loading, setLoading] = useState(false)\r\n  const [doctorDetails, setDoctorDetails] = useState()\r\n\r\n  useEffect(() => {\r\n    loadUser()\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const getDoctorDetails = async () => {\r\n      try {\r\n        setLoading(true)\r\n        const res = await client.get(`/doctors/user/${user._id}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        })\r\n        setDoctorDetails(res.data.doctor)\r\n        setLoading(false)\r\n      } catch (err) {\r\n        if (err.response.data.msg) {\r\n          toast.error('Please add your details below')\r\n        }\r\n\r\n        setLoading(false)\r\n      }\r\n    }\r\n    if (user) {\r\n      getDoctorDetails()\r\n    }\r\n  }, [user?._id])\r\n\r\n  return (\r\n    <Layout>\r\n      {loading && <LoadingSpinner asOverlay />}\r\n      {user && (\r\n        <h2 className='doc__title text-center'>Welcome Doctor: {user.name}</h2>\r\n      )}\r\n      {doctorDetails ? (\r\n        <div className='doctor'>\r\n          <h4>Here are your Details: </h4>\r\n          <div className='doctor__card'>\r\n            <h5>Phone Number:</h5>\r\n            <p>{doctorDetails.phone}</p>\r\n          </div>\r\n          <div className='doctor__card'>\r\n            <h5>Hospital/Clinic Name :</h5>\r\n            <p>{doctorDetails.hospital.name}</p>\r\n          </div>\r\n          <div className='doctor__card'>\r\n            <h5>Consultation Fees :</h5>\r\n            <p>₹ {doctorDetails.fee}</p>\r\n          </div>\r\n          <div className='doctor__card'>\r\n            <h5> Qualifications :</h5>\r\n            <p>{doctorDetails.qlf}</p>\r\n          </div>\r\n          <div className='doctor__card'>\r\n            <h5>Registration Number :</h5>\r\n            <p>{doctorDetails.regNo}</p>\r\n          </div>\r\n          <div className='doctor__card'>\r\n            <h5>Account Number :</h5>\r\n            <p>{doctorDetails.accno}</p>\r\n          </div>\r\n          <div className='doctor__card'>\r\n            <h5>Name On Card :</h5>\r\n            <p>{doctorDetails.accname}</p>\r\n          </div>\r\n          <div className='doctor__card'>\r\n            <h5>Account Type :</h5>\r\n            <p>{doctorDetails.acctype}</p>\r\n          </div>\r\n          <div className='doctor__card'>\r\n            <h5>IFSC Code :</h5>\r\n            <p>{doctorDetails.ifsc}</p>\r\n          </div>\r\n          <div className='doctor__card'>\r\n            <h5>Your Form File :</h5>\r\n            <p>{doctorDetails.file}</p>\r\n          </div>\r\n          <div className='doctor__card'>\r\n            <h5>Your Profile File :</h5>\r\n            <p>{doctorDetails.profile}</p>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <h3 className='text-center py-10'>Add Your Details Below!</h3>\r\n          <AddDoctorDetails />\r\n        </>\r\n      )}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default HomePage\r\n",["157","158"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\services\\client.js",[],["159","160"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\LoginPage.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\reportWebVitals.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\Input.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\routing\\PrivateRoute.js",["161"],"import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport { useAuth } from 'context/use-auth'\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => {\r\n  const { isAuthenticated, loading } = useAuth()\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        !isAuthenticated ? <Redirect to='/login' /> : <Component {...props} />\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nexport default PrivateRoute\r\n",["162","163"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\NotFound.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\utils\\setAuthToken.js",[],["164","165"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\PasswordInput.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\Layout.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\Header.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\UI\\LoadingSpinner.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\AddDoctorDetails.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\Select.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\Button.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\PatientListPage.js",["166"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\UI\\Modal.js",[],["167","168"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\UI\\Backdrop.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\PrescriptionPage.js",["169"],"import React, { useEffect, useState } from 'react'\r\nimport * as Yup from 'yup'\r\nimport { useForm } from 'react-hook-form'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport { useAuth } from 'context/use-auth'\r\nimport toast from 'react-hot-toast'\r\nimport Layout from 'components/layouts/Layout'\r\n\r\nimport './PrescriptionPage.css'\r\nimport LoadingSpinner from 'components/shared/UI/LoadingSpinner'\r\nimport Select from 'components/shared/Forms/Select'\r\nimport Input from 'components/shared/Forms/Input'\r\nimport Button from 'components/shared/Forms/Button'\r\nimport client from 'services/client'\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  patientName: Yup.string()\r\n    .required('Please select a patient')\r\n    .label('Patient Name'),\r\n  prescription: Yup.string().max(300).required().label('Prescription'),\r\n  photo: Yup.mixed()\r\n    .test(\r\n      'imageSize',\r\n      'Please select a .jpeg/.jpg image of size less than 1 Mb',\r\n      (value) => {\r\n        if (value && value[0].type !== 'image/jpeg') {\r\n          return false\r\n        }\r\n        return value && value[0].size <= 1000000\r\n      }\r\n    )\r\n    .label('Image'),\r\n})\r\n\r\nconst PrescriptionPage = () => {\r\n  const { handleSubmit, register, errors } = useForm({\r\n    resolver: yupResolver(validationSchema),\r\n  })\r\n\r\n  const { user } = useAuth()\r\n  const [patients, setPatients] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const getPatients = async () => {\r\n      setLoading(true)\r\n      try {\r\n        const res = await client.get(`/rooms/receiver/${user._id}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        })\r\n        let pateintss = res.data.room\r\n        let newPatients = pateintss.reduce((acc, item) => {\r\n          acc.push({\r\n            label:\r\n              item.senderName.charAt(0).toUpperCase() +\r\n              item.senderName.slice(1),\r\n            value: item.petId,\r\n          })\r\n          return acc\r\n        }, [])\r\n        setPatients(newPatients)\r\n        setLoading(false)\r\n      } catch (error) {\r\n        // console.log(error)\r\n        toast.error('Something Went Wrong! Please try again later!')\r\n        setLoading(false)\r\n      }\r\n    }\r\n    getPatients()\r\n  }, [])\r\n\r\n  const onSubmit = async (data) => {\r\n    const formData = new FormData()\r\n    if (data.photo[0]) {\r\n      formData.append('photo', data.photo[0])\r\n    }\r\n    formData.append('prescription', data.prescription)\r\n    formData.append('docname', user.name)\r\n    for (var key of formData.entries()) {\r\n      console.log(key[0] + ', ' + key[1])\r\n    }\r\n\r\n    try {\r\n      setLoading(true)\r\n      const petRes = await client.patch(\r\n        `/pets/prescription/${data.patientName}`,\r\n        formData,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        }\r\n      )\r\n      console.log('PetRes', petRes)\r\n      toast.success('Prescription Send Successfully!')\r\n      setLoading(false)\r\n    } catch (error) {\r\n      console.log('Error', error)\r\n      toast.error('Something Went Wrong! Please try again later!')\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <div className='center'>\r\n        {loading && <LoadingSpinner asOverlay />}\r\n        <div className='prescription'>\r\n          <h3 className='text-center'> Please Provide Your Prescription </h3>\r\n          <form onSubmit={handleSubmit(onSubmit)}>\r\n            <Select\r\n              label='Select Patient Name'\r\n              data={patients}\r\n              name='patientName'\r\n              myRef={register}\r\n              error={errors.patientName}\r\n            />\r\n            <Input\r\n              label='Prescription'\r\n              placeholder='Enter your prescription'\r\n              element='textarea'\r\n              rows={5}\r\n              name='prescription'\r\n              myRef={register}\r\n              error={errors.prescription}\r\n            />\r\n            <Input\r\n              type='file'\r\n              label='Select image'\r\n              name='photo'\r\n              myRef={register}\r\n              error={errors.photo}\r\n            />\r\n            <Button classNames='full' type='submit'>\r\n              Send Prescription\r\n            </Button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default PrescriptionPage\r\n","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\VideoCallPage.js",["170"],"import React, { useState, useEffect, useCallback } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useAuth } from 'context/use-auth'\r\nimport toast from 'react-hot-toast'\r\n\r\nimport LoadingSpinner from 'components/shared/UI/LoadingSpinner'\r\nimport client from 'services/client'\r\nimport Layout from 'components/layouts/Layout'\r\nimport Room from 'components/videoCall/Room'\r\n\r\nimport './VideoCallPage.css'\r\n\r\nconst VideoCallPage = () => {\r\n  const params = useParams()\r\n  const { user } = useAuth()\r\n  const [token, setToken] = useState(null)\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const getVideoToken = async () => {\r\n      try {\r\n        setLoading(true)\r\n        const tokenRes = await client.post(\r\n          `/users/getToken`,\r\n          {\r\n            userName: user.name,\r\n            roomName: params.id,\r\n          },\r\n          {\r\n            headers: { Authorization: `Bearer ${localStorage.token}` },\r\n          }\r\n        )\r\n        setToken(tokenRes.data)\r\n        setLoading(false)\r\n      } catch (error) {\r\n        console.log('Error', error)\r\n        toast.error('Something went wrong! Please try again later!')\r\n        setLoading(false)\r\n      }\r\n    }\r\n    getVideoToken()\r\n  }, [user.name])\r\n\r\n  const handleLogout = useCallback((event) => {\r\n    setToken(null)\r\n    window.location.href = '/'\r\n  }, [])\r\n\r\n  return (\r\n    <Layout>\r\n      {loading && <LoadingSpinner asOverlay />}\r\n      {token && (\r\n        <Room roomName={params.id} token={token} handleLogout={handleLogout} />\r\n      )}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default VideoCallPage\r\n","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\videoCall\\Participant.js",["171","172","173","174","175"],"import Button from 'components/shared/Forms/Button'\r\nimport React, { useState, useEffect, useRef } from 'react'\r\n\r\nimport { FiMic, FiMicOff } from 'react-icons/fi'\r\n\r\nconst Participant = ({ participant }) => {\r\n  const [videoTracks, setVideoTracks] = useState([])\r\n  const [audioTracks, setAudioTracks] = useState([])\r\n  const [muteAudio, setMuteAudio] = useState(true)\r\n\r\n  const videoRef = useRef()\r\n  const audioRef = useRef()\r\n\r\n  const trackpubsToTracks = (trackMap) =>\r\n    Array.from(trackMap.values())\r\n      .map((publication) => publication.track)\r\n      .filter((track) => track !== null)\r\n\r\n  useEffect(() => {\r\n    setVideoTracks(trackpubsToTracks(participant.videoTracks))\r\n    setAudioTracks(trackpubsToTracks(participant.audioTracks))\r\n\r\n    const trackSubscribed = (track) => {\r\n      if (track.kind === 'video') {\r\n        setVideoTracks((videoTracks) => [...videoTracks, track])\r\n      } else if (track.kind === 'audio') {\r\n        setAudioTracks((audioTracks) => [...audioTracks, track])\r\n      }\r\n    }\r\n\r\n    const trackUnsubscribed = (track) => {\r\n      if (track.kind === 'video') {\r\n        setVideoTracks((videoTracks) => videoTracks.filter((v) => v !== track))\r\n      } else if (track.kind === 'audio') {\r\n        setAudioTracks((audioTracks) => audioTracks.filter((a) => a !== track))\r\n      }\r\n    }\r\n\r\n    participant.on('trackSubscribed', trackSubscribed)\r\n    participant.on('trackUnsubscribed', trackUnsubscribed)\r\n\r\n    return () => {\r\n      setVideoTracks([])\r\n      setAudioTracks([])\r\n      participant.removeAllListeners()\r\n    }\r\n  }, [participant])\r\n\r\n  useEffect(() => {\r\n    const videoTrack = videoTracks[0]\r\n    if (videoTrack) {\r\n      videoTrack.attach(videoRef.current)\r\n      return () => {\r\n        videoTrack.detach()\r\n      }\r\n    }\r\n  }, [videoTracks])\r\n\r\n  useEffect(() => {\r\n    const audioTrack = audioTracks[0]\r\n    if (audioTrack) {\r\n      audioTrack.attach(audioRef.current)\r\n      return () => {\r\n        audioTrack.detach()\r\n      }\r\n    }\r\n  }, [audioTracks])\r\n\r\n  // const handleMuteAudio = () => {\r\n  //   setMuteAudio(!muteAudio)\r\n  //   console.log('Muting')\r\n  //   if (videoRef.current) {\r\n  //     videoRef.current.muted = muteAudio\r\n  //     videoRef.current.defaultMuted = muteAudio\r\n  //   }\r\n  //   console.log(videoRef.current)\r\n  // }\r\n\r\n  return (\r\n    <div className='participant'>\r\n      <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n        <h3>{participant.identity}</h3>\r\n        <video ref={videoRef} autoPlay={true} />\r\n        <audio ref={audioRef} autoPlay={true} />\r\n        {/* <audio ref={audioRef} autoPlay={true} muted={muteAudio} /> */}\r\n        {/* <div onClick={handleMuteAudio}>\r\n          {muteAudio ? (\r\n            <FiMic className='call-icons' />\r\n          ) : (\r\n            <FiMicOff className='call-icons' />\r\n          )}\r\n        </div> */}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Participant\r\n","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\videoCall\\Room.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\ChatPage.js",["176"],"import React, { useState, useEffect } from 'react'\r\nimport Layout from 'components/layouts/Layout'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { useForm } from 'react-hook-form'\r\n\r\nimport Input from 'components/shared/Forms/Input'\r\nimport Button from 'components/shared/Forms/Button'\r\nimport LoadingSpinner from 'components/shared/UI/LoadingSpinner'\r\nimport { FiSend } from 'react-icons/fi'\r\nimport { useAuth } from 'context/use-auth'\r\nimport socket from 'services/socket'\r\n\r\nimport './ChatPage.css'\r\nimport client from 'services/client'\r\nimport toast from 'react-hot-toast'\r\n\r\nconst ChatPage = () => {\r\n  const { user } = useAuth()\r\n  const { handleSubmit, register, reset } = useForm()\r\n  const [messages, setMessages] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n  const loc = useLocation()\r\n  const { name: roomName, petId, senderName } = loc.state?.data\r\n\r\n  useEffect(() => {\r\n    const getAllChats = async () => {\r\n      setLoading(true)\r\n      try {\r\n        const chatRes = await client.get(`/chats/room/${roomName}/${petId}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        })\r\n        const sortedChat = chatRes.data.chats.sort(\r\n          (a, b) => new Date(a.createdAt) - new Date(b.createdAt)\r\n        )\r\n        setMessages(sortedChat)\r\n        setLoading(false)\r\n\r\n        socket.emit('room', roomName)\r\n        socket.on('chat', (data) => {\r\n          const sortedData = data.sort(\r\n            (a, b) => new Date(a.createdAt) - new Date(b.createdAt)\r\n          )\r\n          setMessages(sortedData)\r\n        })\r\n      } catch (error) {\r\n        setLoading(false)\r\n        toast.error(\r\n          error.response?.data.msg || 'Something went wrong! Please try again!'\r\n        )\r\n      }\r\n    }\r\n\r\n    getAllChats()\r\n  }, [])\r\n\r\n  const handleSendMessage = async ({ msg }) => {\r\n    // console.log('Mssd', msg)\r\n    const newMsg = {\r\n      _id: (new Date() * 1000).toString(),\r\n      text: msg,\r\n      createdAt: new Date().toISOString(),\r\n      roomName: roomName,\r\n      petId: petId,\r\n      user: {\r\n        _id: user._id,\r\n        name: user.name,\r\n      },\r\n    }\r\n\r\n    try {\r\n      setLoading(true)\r\n      await client.post('/chats', newMsg, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.token}`,\r\n        },\r\n      })\r\n      setLoading(false)\r\n      const allMsg = [...messages, newMsg].sort(\r\n        (a, b) => new Date(b.createdAt) - new Date(a.createdAt)\r\n      )\r\n      socket.emit('chat', {\r\n        room: roomName,\r\n        msg: allMsg,\r\n      })\r\n    } catch (error) {\r\n      setLoading(false)\r\n      toast.error(\r\n        error.response?.data.msg || 'Something went wrong! Please try again!'\r\n      )\r\n    }\r\n\r\n    reset()\r\n  }\r\n  return (\r\n    <Layout>\r\n      {loading && <LoadingSpinner asOverlay />}\r\n      <div className='chat center'>\r\n        <div className='chat__container'>\r\n          <h2 className='text-center py-10'>Chatting With {senderName}</h2>\r\n          <div className='chat__messages'>\r\n            {messages.length > 0 &&\r\n              messages.map((msg) => (\r\n                <div\r\n                  key={msg._id}\r\n                  className={\r\n                    msg.user._id === user._id\r\n                      ? 'chat__messages__local'\r\n                      : 'chat__messages__remote'\r\n                  }\r\n                >\r\n                  <div className=' message'>\r\n                    <p\r\n                      className={\r\n                        msg.user._id === user._id ? 'local__msg' : 'remote__msg'\r\n                      }\r\n                    >\r\n                      {msg.text}\r\n                    </p>\r\n                    <p className='msg__date__time'>\r\n                      {new Date(msg.createdAt).toLocaleDateString()}\r\n                    </p>\r\n                    <p className='msg__date__time'>\r\n                      {new Date(msg.createdAt).toLocaleTimeString()}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n          </div>\r\n          <form onSubmit={handleSubmit(handleSendMessage)}>\r\n            <div className='chat__input'>\r\n              <Input\r\n                element='textarea'\r\n                placeholder='Enter your message'\r\n                name='msg'\r\n                rows={2}\r\n                myRef={register({\r\n                  required: 'Please enter your message',\r\n                })}\r\n                // error={errors.msg}\r\n              />\r\n              <Button>\r\n                <FiSend />\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default ChatPage\r\n","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\CallLogPage.js",["177","178"],"import React, { useState, useEffect } from 'react'\r\nimport Layout from 'components/layouts/Layout'\r\n\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport './CallLogPage.css'\r\nimport client from 'services/client'\r\nimport { useAuth } from 'context/use-auth'\r\nimport LoadingSpinner from 'components/shared/UI/LoadingSpinner'\r\nimport CallLogCard from 'components/layouts/CallLogCard'\r\nimport toast from 'react-hot-toast'\r\n\r\nimport Backdrop from 'components/shared/UI/Backdrop'\r\nimport Modal from 'components/shared/UI/Modal'\r\n\r\nimport DatePicker from 'react-datepicker'\r\nimport DateTimeInput from 'components/layouts/DateTimeInput'\r\nimport Button from 'components/shared/Forms/Button'\r\n\r\nconst CallLogPage = () => {\r\n  const { user } = useAuth()\r\n  const [missedCall, setMissedCall] = useState([])\r\n  const [completedCall, setCompletedCall] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n  const [open, setOpen] = useState(false)\r\n  const [currentCall, setCurrentCall] = useState()\r\n  const [startDate, setStartDate] = useState(new Date())\r\n  const [startTime, setStartTime] = useState(new Date())\r\n\r\n  useEffect(() => {\r\n    const getMissedCall = async () => {\r\n      setLoading(true)\r\n      try {\r\n        const res = await client.get(`/calllogs?receiverId=${user._id}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        })\r\n\r\n        const callLogsArray = res.data.callLogs\r\n        callLogsArray.forEach((log) => {\r\n          if (log.callPending) {\r\n            setMissedCall((prevLog) => [...prevLog, log])\r\n          } else {\r\n            setCompletedCall((prevLog) => [...prevLog, log])\r\n          }\r\n        })\r\n        setLoading(false)\r\n      } catch (error) {\r\n        setLoading(false)\r\n        toast.error(\r\n          error.response.data?.msg ||\r\n            'Something Went Wrong! Please try again later!'\r\n        )\r\n      }\r\n    }\r\n\r\n    getMissedCall()\r\n  }, [])\r\n\r\n  const toggleModal = () => {\r\n    setOpen(!open)\r\n  }\r\n\r\n  const handleScheduleCall = (call) => {\r\n    toggleModal()\r\n    setCurrentCall(call)\r\n  }\r\n\r\n  const handleScheduleBtn = async () => {\r\n    startDate.setTime(startTime.getTime())\r\n    setLoading(true)\r\n    try {\r\n      const schRes = await client.post(\r\n        '/scheduledCalls',\r\n        {\r\n          date: startDate,\r\n          userId: currentCall.senderId._id,\r\n          doctorId: currentCall.receiverId._id,\r\n          doctorName: currentCall.receiverId.name,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        }\r\n      )\r\n\r\n      setLoading(false)\r\n      toast.success('Your Call has been schedule')\r\n      window.location.href = '/'\r\n    } catch (error) {\r\n      setLoading(false)\r\n      toast.error(\r\n        error.response.data?.msg ||\r\n          'Something Went Wrong! Please try again later!'\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      {loading && <LoadingSpinner asOverlay />}\r\n      {open && <Backdrop toggle={toggleModal} />}\r\n      {open && (\r\n        <Modal toggle={toggleModal} title='Schedule Call'>\r\n          <div className='sch__modal'>\r\n            <h4>Select Time</h4>\r\n            <DatePicker\r\n              selected={startTime}\r\n              onChange={(date) => setStartTime(date)}\r\n              showTimeSelect\r\n              showTimeSelectOnly\r\n              timeIntervals={15}\r\n              timeCaption='Time'\r\n              dateFormat='h:mm aa'\r\n              customInput={<DateTimeInput time={true} />}\r\n            />\r\n\r\n            <h4>Choose Date</h4>\r\n            <DatePicker\r\n              selected={startDate}\r\n              onChange={(date) => setStartDate(date)}\r\n              minDate={new Date()}\r\n              customInput={<DateTimeInput />}\r\n            />\r\n          </div>\r\n          <Button onClick={handleScheduleBtn} classNames='btn__sch'>\r\n            Schedule\r\n          </Button>\r\n        </Modal>\r\n      )}\r\n      <div className='call-log__container'>\r\n        <div className='missed__call call__common'>\r\n          <h2 className='text-center'>Missed Calls</h2>\r\n          {missedCall.length > 0 ? (\r\n            <CallLogCard\r\n              callLogs={missedCall}\r\n              isSchedule={true}\r\n              onSchedule={handleScheduleCall}\r\n            />\r\n          ) : (\r\n            <h4 className='text-center'>No Missed Calls</h4>\r\n          )}\r\n        </div>\r\n        <div className='completed__call call__common'>\r\n          <h2 className='text-center'>Completed Calls</h2>\r\n          {completedCall.length > 0 ? (\r\n            <CallLogCard callLogs={completedCall} />\r\n          ) : (\r\n            <h4 className='text-center'>No Completed Calls</h4>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default CallLogPage\r\n","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\CallLogCard.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\DateTimeInput.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\services\\socket.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\ResetPasswordPage.js",["179"],"import React, { useEffect, useState, useRef } from 'react'\r\nimport { useForm } from 'react-hook-form'\r\nimport toast from 'react-hot-toast'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\n\r\nimport Button from 'components/shared/Forms/Button'\r\nimport PasswordInput from 'components/shared/Forms/PasswordInput'\r\nimport LoadingSpinner from 'components/shared/UI/LoadingSpinner'\r\n\r\nimport client from 'services/client'\r\n\r\nconst ResetPasswordPage = () => {\r\n  const { handleSubmit, register, errors, watch } = useForm()\r\n  const pass = useRef()\r\n  pass.current = watch('password', '')\r\n  const history = useHistory()\r\n  const params = useParams()\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  const onSubmit = async ({ password }) => {\r\n    try {\r\n      setLoading(true)\r\n      await client.post(`/auth/resetpassword/${params.token}`, { password })\r\n      setLoading(false)\r\n      toast.success('Password Reset Success! Please login')\r\n      setTimeout(() => {\r\n        history.replace('/login')\r\n      }, 2000)\r\n    } catch (error) {\r\n      setLoading(false)\r\n      toast.error(\r\n        error.response?.data.msg || 'Something Went Wrong, Please try again!'\r\n      )\r\n      setTimeout(() => {\r\n        history.replace('/login')\r\n      }, 2000)\r\n    }\r\n  }\r\n  return (\r\n    <div className='center'>\r\n      {loading && <LoadingSpinner asOverlay />}\r\n      <div className='form__wrapper'>\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <h2 className='text-center'>Reset Your Password</h2>\r\n\r\n          <PasswordInput\r\n            label='Password'\r\n            name='password'\r\n            placeholder='********'\r\n            myRef={register({\r\n              required: 'Please enter your password',\r\n              minLength: {\r\n                value: 8,\r\n                message: 'Password must be atleast 8 characters long',\r\n              },\r\n            })}\r\n            error={errors.password}\r\n          />\r\n          <PasswordInput\r\n            label='Repeat Password'\r\n            name='repeatpassword'\r\n            placeholder='********'\r\n            myRef={register({\r\n              validate: (value) =>\r\n                value === pass.current || 'The passwords do not match',\r\n            })}\r\n            error={errors.repeatpassword}\r\n          />\r\n\r\n          <Button classNames='full' type='submit'>\r\n            Reset Password\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ResetPasswordPage\r\n",["180","181"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\ForgotPasswordPage.js",[],{"ruleId":"182","replacedBy":"183"},{"ruleId":"184","replacedBy":"185"},{"ruleId":"186","severity":1,"message":"187","line":26,"column":6,"nodeType":"188","endLine":26,"endColumn":8,"suggestions":"189"},{"ruleId":"182","replacedBy":"190"},{"ruleId":"184","replacedBy":"191"},{"ruleId":"186","severity":1,"message":"192","line":44,"column":6,"nodeType":"188","endLine":44,"endColumn":17,"suggestions":"193"},{"ruleId":"182","replacedBy":"194"},{"ruleId":"184","replacedBy":"195"},{"ruleId":"182","replacedBy":"196"},{"ruleId":"184","replacedBy":"197"},{"ruleId":"198","severity":1,"message":"199","line":6,"column":28,"nodeType":"200","messageId":"201","endLine":6,"endColumn":35},{"ruleId":"182","replacedBy":"202"},{"ruleId":"184","replacedBy":"203"},{"ruleId":"182","replacedBy":"204"},{"ruleId":"184","replacedBy":"205"},{"ruleId":"186","severity":1,"message":"206","line":44,"column":6,"nodeType":"188","endLine":44,"endColumn":8,"suggestions":"207"},{"ruleId":"182","replacedBy":"208"},{"ruleId":"184","replacedBy":"209"},{"ruleId":"186","severity":1,"message":"206","line":72,"column":6,"nodeType":"188","endLine":72,"endColumn":8,"suggestions":"210"},{"ruleId":"186","severity":1,"message":"211","line":42,"column":6,"nodeType":"188","endLine":42,"endColumn":17,"suggestions":"212"},{"ruleId":"198","severity":1,"message":"213","line":1,"column":8,"nodeType":"200","messageId":"201","endLine":1,"endColumn":14},{"ruleId":"198","severity":1,"message":"214","line":4,"column":10,"nodeType":"200","messageId":"201","endLine":4,"endColumn":15},{"ruleId":"198","severity":1,"message":"215","line":4,"column":17,"nodeType":"200","messageId":"201","endLine":4,"endColumn":25},{"ruleId":"198","severity":1,"message":"216","line":9,"column":10,"nodeType":"200","messageId":"201","endLine":9,"endColumn":19},{"ruleId":"198","severity":1,"message":"217","line":9,"column":21,"nodeType":"200","messageId":"201","endLine":9,"endColumn":33},{"ruleId":"186","severity":1,"message":"218","line":56,"column":6,"nodeType":"188","endLine":56,"endColumn":8,"suggestions":"219"},{"ruleId":"186","severity":1,"message":"206","line":58,"column":6,"nodeType":"188","endLine":58,"endColumn":8,"suggestions":"220"},{"ruleId":"198","severity":1,"message":"221","line":73,"column":13,"nodeType":"200","messageId":"201","endLine":73,"endColumn":19},{"ruleId":"198","severity":1,"message":"222","line":1,"column":17,"nodeType":"200","messageId":"201","endLine":1,"endColumn":26},{"ruleId":"182","replacedBy":"223"},{"ruleId":"184","replacedBy":"224"},"no-native-reassign",["225"],"no-negated-in-lhs",["226"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadUser'. Either include it or remove the dependency array.","ArrayExpression",["227"],["225"],["226"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["228"],["225"],["226"],["225"],["226"],"no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar",["225"],["226"],["225"],["226"],"React Hook useEffect has a missing dependency: 'user._id'. Either include it or remove the dependency array.",["229"],["225"],["226"],["230"],"React Hook useEffect has a missing dependency: 'params.id'. Either include it or remove the dependency array.",["231"],"'Button' is defined but never used.","'FiMic' is defined but never used.","'FiMicOff' is defined but never used.","'muteAudio' is assigned a value but never used.","'setMuteAudio' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'petId' and 'roomName'. Either include them or remove the dependency array.",["232"],["233"],"'schRes' is assigned a value but never used.","'useEffect' is defined but never used.",["225"],["226"],"no-global-assign","no-unsafe-negation",{"desc":"234","fix":"235"},{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},{"desc":"238","fix":"240"},{"desc":"241","fix":"242"},{"desc":"243","fix":"244"},{"desc":"238","fix":"245"},"Update the dependencies array to be: [loadUser]",{"range":"246","text":"247"},"Update the dependencies array to be: [user, user._id]",{"range":"248","text":"249"},"Update the dependencies array to be: [user._id]",{"range":"250","text":"251"},{"range":"252","text":"251"},"Update the dependencies array to be: [params.id, user.name]",{"range":"253","text":"254"},"Update the dependencies array to be: [petId, roomName]",{"range":"255","text":"256"},{"range":"257","text":"251"},[931,933],"[loadUser]",[1218,1229],"[user, user._id]",[1500,1502],"[user._id]",[2277,2279],[1254,1265],"[params.id, user.name]",[1828,1830],"[petId, roomName]",[1955,1957]]