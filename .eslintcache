[{"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\index.js":"1","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\App.js":"2","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\RegisterPage.js":"3","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\context\\use-auth.js":"4","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\HomePage.js":"5","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\services\\client.js":"6","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\LoginPage.js":"7","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\reportWebVitals.js":"8","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\Input.js":"9","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\routing\\PrivateRoute.js":"10","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\NotFound.js":"11","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\utils\\setAuthToken.js":"12","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\PasswordInput.js":"13","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\Layout.js":"14","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\Header.js":"15","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\UI\\LoadingSpinner.js":"16","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\AddDoctorDetails.js":"17","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\Select.js":"18","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\Button.js":"19","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\PatientListPage.js":"20","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\UI\\Modal.js":"21","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\UI\\Backdrop.js":"22","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\PrescriptionPage.js":"23","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\VideoCallPage.js":"24","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\videoCall\\Participant.js":"25","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\videoCall\\Room.js":"26","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\ChatPage.js":"27","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\CallLogPage.js":"28","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\CallLogCard.js":"29","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\DateTimeInput.js":"30","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\services\\socket.js":"31","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\ResetPasswordPage.js":"32","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\ForgotPasswordPage.js":"33"},{"size":469,"mtime":1612935527724,"results":"34","hashOfConfig":"35"},{"size":1791,"mtime":1613559586588,"results":"36","hashOfConfig":"35"},{"size":4475,"mtime":1613561852563,"results":"37","hashOfConfig":"35"},{"size":3954,"mtime":1613561530110,"results":"38","hashOfConfig":"35"},{"size":3311,"mtime":1613814674766,"results":"39","hashOfConfig":"35"},{"size":202,"mtime":1614666868879,"results":"40","hashOfConfig":"35"},{"size":4352,"mtime":1613561627649,"results":"41","hashOfConfig":"35"},{"size":362,"mtime":1606886196678,"results":"42","hashOfConfig":"35"},{"size":969,"mtime":1612933219433,"results":"43","hashOfConfig":"35"},{"size":443,"mtime":1612936776068,"results":"44","hashOfConfig":"35"},{"size":439,"mtime":1612951058953,"results":"45","hashOfConfig":"35"},{"size":251,"mtime":1612938552228,"results":"46","hashOfConfig":"35"},{"size":1246,"mtime":1613104033191,"results":"47","hashOfConfig":"35"},{"size":235,"mtime":1613037914716,"results":"48","hashOfConfig":"35"},{"size":1089,"mtime":1613467749512,"results":"49","hashOfConfig":"35"},{"size":272,"mtime":1612932227806,"results":"50","hashOfConfig":"35"},{"size":9526,"mtime":1613821701603,"results":"51","hashOfConfig":"35"},{"size":688,"mtime":1612953030861,"results":"52","hashOfConfig":"35"},{"size":322,"mtime":1612933214649,"results":"53","hashOfConfig":"35"},{"size":9300,"mtime":1613979179314,"results":"54","hashOfConfig":"35"},{"size":637,"mtime":1613027629282,"results":"55","hashOfConfig":"35"},{"size":278,"mtime":1613027244048,"results":"56","hashOfConfig":"35"},{"size":4394,"mtime":1613131068038,"results":"57","hashOfConfig":"35"},{"size":1623,"mtime":1613128972583,"results":"58","hashOfConfig":"35"},{"size":2923,"mtime":1613194297479,"results":"59","hashOfConfig":"35"},{"size":2067,"mtime":1613131046059,"results":"60","hashOfConfig":"35"},{"size":4855,"mtime":1614667422609,"results":"61","hashOfConfig":"35"},{"size":4825,"mtime":1613477925799,"results":"62","hashOfConfig":"35"},{"size":1301,"mtime":1613472225545,"results":"63","hashOfConfig":"35"},{"size":465,"mtime":1613475664031,"results":"64","hashOfConfig":"35"},{"size":242,"mtime":1614666875722,"results":"65","hashOfConfig":"35"},{"size":2475,"mtime":1613560798652,"results":"66","hashOfConfig":"35"},{"size":1950,"mtime":1613560487490,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1iylv84",{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"123"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"119"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"119"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\index.js",[],["157","158"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\App.js",["159"],"import React, { useEffect } from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport { Toaster } from 'react-hot-toast'\nimport { useAuth } from 'context/use-auth'\nimport PrivateRoute from 'routing/PrivateRoute'\n\nimport LoginPage from 'pages/auth/LoginPage'\nimport RegisterPage from 'pages/auth/RegisterPage'\nimport HomePage from 'pages/doctor/HomePage'\nimport PatientListPage from 'pages/doctor/PatientListPage'\nimport NotFound from 'pages/NotFound'\nimport PrescriptionPage from 'pages/doctor/PrescriptionPage'\nimport VideoCallPage from 'pages/doctor/VideoCallPage'\nimport ChatPage from 'pages/doctor/ChatPage'\nimport CallLogPage from 'pages/doctor/CallLogPage'\nimport ForgotPasswordPage from 'pages/auth/ForgotPasswordPage'\nimport ResetPasswordPage from 'pages/auth/ResetPasswordPage'\n\nconst App = () => {\n  const { loadUser } = useAuth()\n\n  useEffect(() => {\n    if (localStorage.token) {\n      loadUser()\n    }\n  }, [])\n\n  return (\n    <>\n      <Toaster />\n      <Switch>\n        <PrivateRoute exact path='/' component={HomePage} />\n        <PrivateRoute exact path='/patientList' component={PatientListPage} />\n        <PrivateRoute exact path='/prescription' component={PrescriptionPage} />\n        <PrivateRoute exact path='/video-call/:id' component={VideoCallPage} />\n        <PrivateRoute exact path='/chat/:id' component={ChatPage} />\n        <PrivateRoute exact path='/call-log' component={CallLogPage} />\n        <Route path='/register' component={RegisterPage} />\n        <Route path='/login' component={LoginPage} />\n        <Route path='/forgotPassword' component={ForgotPasswordPage} />\n        <Route path='/passwordreset/:token' component={ResetPasswordPage} />\n        <Route path='/*' component={NotFound} />\n      </Switch>\n    </>\n  )\n}\n\nexport default App\n",["160","161"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\RegisterPage.js",[],["162","163"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\context\\use-auth.js",[],["164","165"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\HomePage.js",["166"],"import React, { useEffect, useState } from 'react'\r\nimport { useAuth } from 'context/use-auth'\r\nimport client from 'services/client'\r\nimport toast from 'react-hot-toast'\r\n\r\nimport Layout from 'components/layouts/Layout'\r\nimport LoadingSpinner from 'components/shared/UI/LoadingSpinner'\r\nimport AddDoctorDetails from 'components/layouts/AddDoctorDetails'\r\n\r\nimport './HomePage.css'\r\n\r\nconst HomePage = () => {\r\n  const { loadUser, user } = useAuth()\r\n  const [loading, setLoading] = useState(false)\r\n  const [doctorDetails, setDoctorDetails] = useState()\r\n\r\n  useEffect(() => {\r\n    loadUser()\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const getDoctorDetails = async () => {\r\n      try {\r\n        setLoading(true)\r\n        const res = await client.get(`/doctors/user/${user._id}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        })\r\n        setDoctorDetails(res.data.doctor)\r\n        setLoading(false)\r\n      } catch (err) {\r\n        if (err.response.data.msg) {\r\n          toast.error('Please add your details below')\r\n        }\r\n\r\n        setLoading(false)\r\n      }\r\n    }\r\n    if (user) {\r\n      getDoctorDetails()\r\n    }\r\n  }, [user?._id])\r\n\r\n  return (\r\n    <Layout>\r\n      {loading && <LoadingSpinner asOverlay />}\r\n      {user && (\r\n        <h2 className='doc__title text-center'>Welcome Doctor: {user.name}</h2>\r\n      )}\r\n      {doctorDetails ? (\r\n        <div className='doctor'>\r\n          <h4>Here are your Details: </h4>\r\n          <div className='doctor__card'>\r\n            <h5>Phone Number:</h5>\r\n            <p>{doctorDetails.phone}</p>\r\n          </div>\r\n          <div className='doctor__card'>\r\n            <h5>Hospital/Clinic Name :</h5>\r\n            <p>{doctorDetails.hospital.name}</p>\r\n          </div>\r\n          <div className='doctor__card'>\r\n            <h5>Consultation Fees :</h5>\r\n            <p>₹ {doctorDetails.fee}</p>\r\n          </div>\r\n          <div className='doctor__card'>\r\n            <h5> Qualifications :</h5>\r\n            <p>{doctorDetails.qlf}</p>\r\n          </div>\r\n          <div className='doctor__card'>\r\n            <h5>Registration Number :</h5>\r\n            <p>{doctorDetails.regNo}</p>\r\n          </div>\r\n          <div className='doctor__card'>\r\n            <h5>Account Number :</h5>\r\n            <p>{doctorDetails.accno}</p>\r\n          </div>\r\n          <div className='doctor__card'>\r\n            <h5>Name On Card :</h5>\r\n            <p>{doctorDetails.accname}</p>\r\n          </div>\r\n          <div className='doctor__card'>\r\n            <h5>Account Type :</h5>\r\n            <p>{doctorDetails.acctype}</p>\r\n          </div>\r\n          <div className='doctor__card'>\r\n            <h5>IFSC Code :</h5>\r\n            <p>{doctorDetails.ifsc}</p>\r\n          </div>\r\n          <div className='doctor__card'>\r\n            <h5>Your Form File :</h5>\r\n            <p>{doctorDetails.file}</p>\r\n          </div>\r\n          <div className='doctor__card'>\r\n            <h5>Your Profile File :</h5>\r\n            <p>{doctorDetails.profile}</p>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <h3 className='text-center py-10'>Add Your Details Below!</h3>\r\n          <AddDoctorDetails />\r\n        </>\r\n      )}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default HomePage\r\n",["167","168"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\services\\client.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\LoginPage.js",[],["169","170"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\reportWebVitals.js",[],["171","172"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\Input.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\routing\\PrivateRoute.js",["173"],"import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport { useAuth } from 'context/use-auth'\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => {\r\n  const { isAuthenticated, loading } = useAuth()\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        !isAuthenticated ? <Redirect to='/login' /> : <Component {...props} />\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nexport default PrivateRoute\r\n",["174","175"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\NotFound.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\utils\\setAuthToken.js",[],["176","177"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\PasswordInput.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\Layout.js",[],["178","179"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\Header.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\UI\\LoadingSpinner.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\AddDoctorDetails.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\Select.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\Button.js",[],["180","181"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\PatientListPage.js",["182"],"import React, { useState, useEffect } from 'react'\r\nimport Layout from 'components/layouts/Layout'\r\nimport client from 'services/client'\r\nimport toast from 'react-hot-toast'\r\nimport { FiMessageCircle, FiVideo } from 'react-icons/fi'\r\n\r\nimport './PatientListPage.css'\r\n\r\nimport { useAuth } from 'context/use-auth'\r\nimport LoadingSpinner from 'components/shared/UI/LoadingSpinner'\r\nimport { FiChevronRight } from 'react-icons/fi'\r\nimport Backdrop from 'components/shared/UI/Backdrop'\r\nimport Modal from 'components/shared/UI/Modal'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst PatientListPage = () => {\r\n  const { user } = useAuth()\r\n  const [patients, setPatients] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n  const [open, setOpen] = useState(false)\r\n  const [currentPatient, setCurrentPatient] = useState()\r\n  const [pet, setPet] = useState(null)\r\n  const [petLoading, setPetLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const getPatients = async () => {\r\n      setLoading(true)\r\n      try {\r\n        const res = await client.get(`/rooms/receiver/${user._id}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        })\r\n        // console.log('Res', res)\r\n        setPatients(res.data.room)\r\n        setLoading(false)\r\n      } catch (error) {\r\n        // console.log(error)\r\n        toast.error('Something Went Wrong! Please try again later!')\r\n        setLoading(false)\r\n      }\r\n    }\r\n    getPatients()\r\n  }, [])\r\n\r\n  const toggleModal = () => {\r\n    setOpen(!open)\r\n  }\r\n\r\n  const handlePatModal = async (pat) => {\r\n    setCurrentPatient(pat)\r\n    toggleModal()\r\n    try {\r\n      setPetLoading(true)\r\n      const petRes = await client.get(`/pets/${pat.petId}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.token}`,\r\n        },\r\n      })\r\n      console.log('PET', petRes)\r\n      setPet(petRes.data.exPet)\r\n      setPetLoading(false)\r\n    } catch (error) {\r\n      toast.error('Something Went Wrong! Please try again later!')\r\n      setPetLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      {loading && <LoadingSpinner asOverlay />}\r\n      {open && <Backdrop toggle={toggleModal} />}\r\n      {open && (\r\n        <Modal\r\n          toggle={toggleModal}\r\n          title={`${currentPatient.senderName} pet details`}\r\n        >\r\n          <div className='chat-video_wrapper flex-center'>\r\n            <Link\r\n              to={`/video-call/${currentPatient.name}`}\r\n              className='btn flex-center'\r\n            >\r\n              <FiVideo className='icon' />\r\n              Video Call\r\n            </Link>\r\n            <Link\r\n              to={{\r\n                pathname: `/chat/${currentPatient.name}`,\r\n                state: { data: currentPatient },\r\n              }}\r\n              className='btn flex-center'\r\n            >\r\n              <FiMessageCircle className='icon' />\r\n              Chat\r\n            </Link>\r\n          </div>\r\n          {petLoading && <LoadingSpinner asOverlay />}\r\n          {pet && (\r\n            <div className='pet__details'>\r\n              <h5>\r\n                Weight: <span>{pet.weight} Kg</span>\r\n              </h5>\r\n\r\n              <h5>\r\n                Gender: <span>{pet.gender}</span>\r\n              </h5>\r\n              <h5>\r\n                Pet Type: <span>{pet.type}</span>\r\n              </h5>\r\n              <h5>\r\n                Pet Breed: <span>{pet.breed}</span>\r\n              </h5>\r\n\r\n              <h5>\r\n                Age:\r\n                <span>\r\n                  {pet.years !== 0 && `${pet.years} years`}{' '}\r\n                  {pet.months !== 0 && `${pet.months} months`}\r\n                </span>\r\n              </h5>\r\n\r\n              {pet.petHistoryImages.length > 0 && (\r\n                <>\r\n                  <h5>Pet History Images: </h5>\r\n                  <div className='pet__history__images'>\r\n                    {pet.petHistoryImages.map((img, i) => (\r\n                      <div key={`${img}-${i}`} className='pet__history__img'>\r\n                        <img\r\n                          src={`http://192.168.43.242:8000/${img}`}\r\n                          width='160'\r\n                          height='160'\r\n                          alt={`${pet.type}`}\r\n                        />\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </>\r\n              )}\r\n\r\n              {pet.prescriptions.length > 0 && <h5>Pet Prescriptions:</h5>}\r\n              {pet.prescriptions.length > 0 &&\r\n                pet.prescriptions.map((pr, i) => (\r\n                  <div className='py-10' key={pr._id}>\r\n                    <h5>\r\n                      {i + 1}. Prescription: <span>{pr.prescription}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Docname: <span>{pr.docname}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Date: <span>{new Date(pr.date).toLocaleString()}</span>\r\n                    </h5>\r\n                    {pr.img && (\r\n                      <>\r\n                        <h5>Prescription image</h5>\r\n                        <div className='pet__history__img'>\r\n                          <img\r\n                            src={`http://192.168.43.242:8000/${pr.img}`}\r\n                            width='160'\r\n                            height='160'\r\n                            style={{ maxHeight: '160px', maxWidth: '160px' }}\r\n                            alt={`${pet.type}`}\r\n                          />\r\n                        </div>\r\n                      </>\r\n                    )}\r\n                    <hr />\r\n                  </div>\r\n                ))}\r\n\r\n              {pet.problems.length > 0 && <h5>Pet Problems: </h5>}\r\n              {pet.problems.length > 0 &&\r\n                pet.problems.map((pb, i) => (\r\n                  <div className='pet__problems py-10' key={pb._id}>\r\n                    <h5>\r\n                      {i + 1}. Problem: <span>{pb.problem}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Docname: <span>{pb.docname}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Time Period: <span>{pb.time}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Appetite: <span>{pb.Appetite}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Behaviour: <span>{pb.Behaviour}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Ears: <span>{pb.Ears}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Eyes: <span>{pb.Eyes}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Faces: <span>{pb.Feces}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Gait: <span>{pb.Gait}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Mucous: <span>{pb.Mucous}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Skin: <span>{pb.Skin}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Urine: <span>{pb.Urine}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Comment: <span>{pb.comment}</span>\r\n                    </h5>\r\n\r\n                    {pb.images.length && <h5>Pet Problem image</h5>}\r\n                    <div className='pet__history__images'>\r\n                      {pb.images.length > 0 &&\r\n                        pb.images.map((img, i) => (\r\n                          <div\r\n                            key={`${img}-${i}`}\r\n                            className='pet__history__img'\r\n                          >\r\n                            <img\r\n                              src={`http://192.168.43.242:8000/${img}`}\r\n                              width='160'\r\n                              height='160'\r\n                              style={{ maxHeight: '160px', maxWidth: '160px' }}\r\n                              alt={`${pet.type}`}\r\n                            />\r\n                          </div>\r\n                        ))}\r\n                    </div>\r\n                    <hr />\r\n                  </div>\r\n                ))}\r\n            </div>\r\n          )}\r\n        </Modal>\r\n      )}\r\n      {patients.length === 0 && (\r\n        <h3 className='text-center'>\r\n          No Patients Have Contacted You, Please Comeback After Some Time!\r\n        </h3>\r\n      )}\r\n\r\n      {patients.length > 0 && (\r\n        <h3 className='text-center'>Here are your patients list:</h3>\r\n      )}\r\n      {patients.length > 0 && (\r\n        <div className='center'>\r\n          {patients.map((pat) => (\r\n            <div\r\n              key={pat._id}\r\n              className='patient__list'\r\n              onClick={() => handlePatModal(pat)}\r\n            >\r\n              <div className='patient__list__item'>\r\n                <p className='patient__list__item__img'>{pat.senderName[0]}</p>\r\n                <p className='patient__list__item__name'>{pat.senderName}</p>\r\n              </div>\r\n              <FiChevronRight style={{ fontSize: '2.5rem' }} />\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default PatientListPage\r\n",["183","184"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\UI\\Modal.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\UI\\Backdrop.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\PrescriptionPage.js",["185"],"import React, { useEffect, useState } from 'react'\r\nimport * as Yup from 'yup'\r\nimport { useForm } from 'react-hook-form'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport { useAuth } from 'context/use-auth'\r\nimport toast from 'react-hot-toast'\r\nimport Layout from 'components/layouts/Layout'\r\n\r\nimport './PrescriptionPage.css'\r\nimport LoadingSpinner from 'components/shared/UI/LoadingSpinner'\r\nimport Select from 'components/shared/Forms/Select'\r\nimport Input from 'components/shared/Forms/Input'\r\nimport Button from 'components/shared/Forms/Button'\r\nimport client from 'services/client'\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  patientName: Yup.string()\r\n    .required('Please select a patient')\r\n    .label('Patient Name'),\r\n  prescription: Yup.string().max(300).required().label('Prescription'),\r\n  photo: Yup.mixed()\r\n    .test(\r\n      'imageSize',\r\n      'Please select a .jpeg/.jpg image of size less than 1 Mb',\r\n      (value) => {\r\n        if (value && value[0].type !== 'image/jpeg') {\r\n          return false\r\n        }\r\n        return value && value[0].size <= 1000000\r\n      }\r\n    )\r\n    .label('Image'),\r\n})\r\n\r\nconst PrescriptionPage = () => {\r\n  const { handleSubmit, register, errors } = useForm({\r\n    resolver: yupResolver(validationSchema),\r\n  })\r\n\r\n  const { user } = useAuth()\r\n  const [patients, setPatients] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const getPatients = async () => {\r\n      setLoading(true)\r\n      try {\r\n        const res = await client.get(`/rooms/receiver/${user._id}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        })\r\n        let pateintss = res.data.room\r\n        let newPatients = pateintss.reduce((acc, item) => {\r\n          acc.push({\r\n            label:\r\n              item.senderName.charAt(0).toUpperCase() +\r\n              item.senderName.slice(1),\r\n            value: item.petId,\r\n          })\r\n          return acc\r\n        }, [])\r\n        setPatients(newPatients)\r\n        setLoading(false)\r\n      } catch (error) {\r\n        // console.log(error)\r\n        toast.error('Something Went Wrong! Please try again later!')\r\n        setLoading(false)\r\n      }\r\n    }\r\n    getPatients()\r\n  }, [])\r\n\r\n  const onSubmit = async (data) => {\r\n    const formData = new FormData()\r\n    if (data.photo[0]) {\r\n      formData.append('photo', data.photo[0])\r\n    }\r\n    formData.append('prescription', data.prescription)\r\n    formData.append('docname', user.name)\r\n    for (var key of formData.entries()) {\r\n      console.log(key[0] + ', ' + key[1])\r\n    }\r\n\r\n    try {\r\n      setLoading(true)\r\n      const petRes = await client.patch(\r\n        `/pets/prescription/${data.patientName}`,\r\n        formData,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        }\r\n      )\r\n      console.log('PetRes', petRes)\r\n      toast.success('Prescription Send Successfully!')\r\n      setLoading(false)\r\n    } catch (error) {\r\n      console.log('Error', error)\r\n      toast.error('Something Went Wrong! Please try again later!')\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <div className='center'>\r\n        {loading && <LoadingSpinner asOverlay />}\r\n        <div className='prescription'>\r\n          <h3 className='text-center'> Please Provide Your Prescription </h3>\r\n          <form onSubmit={handleSubmit(onSubmit)}>\r\n            <Select\r\n              label='Select Patient Name'\r\n              data={patients}\r\n              name='patientName'\r\n              myRef={register}\r\n              error={errors.patientName}\r\n            />\r\n            <Input\r\n              label='Prescription'\r\n              placeholder='Enter your prescription'\r\n              element='textarea'\r\n              rows={5}\r\n              name='prescription'\r\n              myRef={register}\r\n              error={errors.prescription}\r\n            />\r\n            <Input\r\n              type='file'\r\n              label='Select image'\r\n              name='photo'\r\n              myRef={register}\r\n              error={errors.photo}\r\n            />\r\n            <Button classNames='full' type='submit'>\r\n              Send Prescription\r\n            </Button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default PrescriptionPage\r\n","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\VideoCallPage.js",["186"],"import React, { useState, useEffect, useCallback } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useAuth } from 'context/use-auth'\r\nimport toast from 'react-hot-toast'\r\n\r\nimport LoadingSpinner from 'components/shared/UI/LoadingSpinner'\r\nimport client from 'services/client'\r\nimport Layout from 'components/layouts/Layout'\r\nimport Room from 'components/videoCall/Room'\r\n\r\nimport './VideoCallPage.css'\r\n\r\nconst VideoCallPage = () => {\r\n  const params = useParams()\r\n  const { user } = useAuth()\r\n  const [token, setToken] = useState(null)\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const getVideoToken = async () => {\r\n      try {\r\n        setLoading(true)\r\n        const tokenRes = await client.post(\r\n          `/users/getToken`,\r\n          {\r\n            userName: user.name,\r\n            roomName: params.id,\r\n          },\r\n          {\r\n            headers: { Authorization: `Bearer ${localStorage.token}` },\r\n          }\r\n        )\r\n        setToken(tokenRes.data)\r\n        setLoading(false)\r\n      } catch (error) {\r\n        console.log('Error', error)\r\n        toast.error('Something went wrong! Please try again later!')\r\n        setLoading(false)\r\n      }\r\n    }\r\n    getVideoToken()\r\n  }, [user.name])\r\n\r\n  const handleLogout = useCallback((event) => {\r\n    setToken(null)\r\n    window.location.href = '/'\r\n  }, [])\r\n\r\n  return (\r\n    <Layout>\r\n      {loading && <LoadingSpinner asOverlay />}\r\n      {token && (\r\n        <Room roomName={params.id} token={token} handleLogout={handleLogout} />\r\n      )}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default VideoCallPage\r\n","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\videoCall\\Participant.js",["187","188","189","190","191"],"import Button from 'components/shared/Forms/Button'\r\nimport React, { useState, useEffect, useRef } from 'react'\r\n\r\nimport { FiMic, FiMicOff } from 'react-icons/fi'\r\n\r\nconst Participant = ({ participant }) => {\r\n  const [videoTracks, setVideoTracks] = useState([])\r\n  const [audioTracks, setAudioTracks] = useState([])\r\n  const [muteAudio, setMuteAudio] = useState(true)\r\n\r\n  const videoRef = useRef()\r\n  const audioRef = useRef()\r\n\r\n  const trackpubsToTracks = (trackMap) =>\r\n    Array.from(trackMap.values())\r\n      .map((publication) => publication.track)\r\n      .filter((track) => track !== null)\r\n\r\n  useEffect(() => {\r\n    setVideoTracks(trackpubsToTracks(participant.videoTracks))\r\n    setAudioTracks(trackpubsToTracks(participant.audioTracks))\r\n\r\n    const trackSubscribed = (track) => {\r\n      if (track.kind === 'video') {\r\n        setVideoTracks((videoTracks) => [...videoTracks, track])\r\n      } else if (track.kind === 'audio') {\r\n        setAudioTracks((audioTracks) => [...audioTracks, track])\r\n      }\r\n    }\r\n\r\n    const trackUnsubscribed = (track) => {\r\n      if (track.kind === 'video') {\r\n        setVideoTracks((videoTracks) => videoTracks.filter((v) => v !== track))\r\n      } else if (track.kind === 'audio') {\r\n        setAudioTracks((audioTracks) => audioTracks.filter((a) => a !== track))\r\n      }\r\n    }\r\n\r\n    participant.on('trackSubscribed', trackSubscribed)\r\n    participant.on('trackUnsubscribed', trackUnsubscribed)\r\n\r\n    return () => {\r\n      setVideoTracks([])\r\n      setAudioTracks([])\r\n      participant.removeAllListeners()\r\n    }\r\n  }, [participant])\r\n\r\n  useEffect(() => {\r\n    const videoTrack = videoTracks[0]\r\n    if (videoTrack) {\r\n      videoTrack.attach(videoRef.current)\r\n      return () => {\r\n        videoTrack.detach()\r\n      }\r\n    }\r\n  }, [videoTracks])\r\n\r\n  useEffect(() => {\r\n    const audioTrack = audioTracks[0]\r\n    if (audioTrack) {\r\n      audioTrack.attach(audioRef.current)\r\n      return () => {\r\n        audioTrack.detach()\r\n      }\r\n    }\r\n  }, [audioTracks])\r\n\r\n  // const handleMuteAudio = () => {\r\n  //   setMuteAudio(!muteAudio)\r\n  //   console.log('Muting')\r\n  //   if (videoRef.current) {\r\n  //     videoRef.current.muted = muteAudio\r\n  //     videoRef.current.defaultMuted = muteAudio\r\n  //   }\r\n  //   console.log(videoRef.current)\r\n  // }\r\n\r\n  return (\r\n    <div className='participant'>\r\n      <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n        <h3>{participant.identity}</h3>\r\n        <video ref={videoRef} autoPlay={true} />\r\n        <audio ref={audioRef} autoPlay={true} />\r\n        {/* <audio ref={audioRef} autoPlay={true} muted={muteAudio} /> */}\r\n        {/* <div onClick={handleMuteAudio}>\r\n          {muteAudio ? (\r\n            <FiMic className='call-icons' />\r\n          ) : (\r\n            <FiMicOff className='call-icons' />\r\n          )}\r\n        </div> */}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Participant\r\n","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\videoCall\\Room.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\ChatPage.js",["192","193"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\CallLogPage.js",["194","195"],"import React, { useState, useEffect } from 'react'\r\nimport Layout from 'components/layouts/Layout'\r\n\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport './CallLogPage.css'\r\nimport client from 'services/client'\r\nimport { useAuth } from 'context/use-auth'\r\nimport LoadingSpinner from 'components/shared/UI/LoadingSpinner'\r\nimport CallLogCard from 'components/layouts/CallLogCard'\r\nimport toast from 'react-hot-toast'\r\n\r\nimport Backdrop from 'components/shared/UI/Backdrop'\r\nimport Modal from 'components/shared/UI/Modal'\r\n\r\nimport DatePicker from 'react-datepicker'\r\nimport DateTimeInput from 'components/layouts/DateTimeInput'\r\nimport Button from 'components/shared/Forms/Button'\r\n\r\nconst CallLogPage = () => {\r\n  const { user } = useAuth()\r\n  const [missedCall, setMissedCall] = useState([])\r\n  const [completedCall, setCompletedCall] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n  const [open, setOpen] = useState(false)\r\n  const [currentCall, setCurrentCall] = useState()\r\n  const [startDate, setStartDate] = useState(new Date())\r\n  const [startTime, setStartTime] = useState(new Date())\r\n\r\n  useEffect(() => {\r\n    const getMissedCall = async () => {\r\n      setLoading(true)\r\n      try {\r\n        const res = await client.get(`/calllogs?receiverId=${user._id}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        })\r\n\r\n        const callLogsArray = res.data.callLogs\r\n        callLogsArray.forEach((log) => {\r\n          if (log.callPending) {\r\n            setMissedCall((prevLog) => [...prevLog, log])\r\n          } else {\r\n            setCompletedCall((prevLog) => [...prevLog, log])\r\n          }\r\n        })\r\n        setLoading(false)\r\n      } catch (error) {\r\n        setLoading(false)\r\n        toast.error(\r\n          error.response.data?.msg ||\r\n            'Something Went Wrong! Please try again later!'\r\n        )\r\n      }\r\n    }\r\n\r\n    getMissedCall()\r\n  }, [])\r\n\r\n  const toggleModal = () => {\r\n    setOpen(!open)\r\n  }\r\n\r\n  const handleScheduleCall = (call) => {\r\n    toggleModal()\r\n    setCurrentCall(call)\r\n  }\r\n\r\n  const handleScheduleBtn = async () => {\r\n    startDate.setTime(startTime.getTime())\r\n    setLoading(true)\r\n    try {\r\n      const schRes = await client.post(\r\n        '/scheduledCalls',\r\n        {\r\n          date: startDate,\r\n          userId: currentCall.senderId._id,\r\n          doctorId: currentCall.receiverId._id,\r\n          doctorName: currentCall.receiverId.name,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        }\r\n      )\r\n\r\n      setLoading(false)\r\n      toast.success('Your Call has been schedule')\r\n      window.location.href = '/'\r\n    } catch (error) {\r\n      setLoading(false)\r\n      toast.error(\r\n        error.response.data?.msg ||\r\n          'Something Went Wrong! Please try again later!'\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      {loading && <LoadingSpinner asOverlay />}\r\n      {open && <Backdrop toggle={toggleModal} />}\r\n      {open && (\r\n        <Modal toggle={toggleModal} title='Schedule Call'>\r\n          <div className='sch__modal'>\r\n            <h4>Select Time</h4>\r\n            <DatePicker\r\n              selected={startTime}\r\n              onChange={(date) => setStartTime(date)}\r\n              showTimeSelect\r\n              showTimeSelectOnly\r\n              timeIntervals={15}\r\n              timeCaption='Time'\r\n              dateFormat='h:mm aa'\r\n              customInput={<DateTimeInput time={true} />}\r\n            />\r\n\r\n            <h4>Choose Date</h4>\r\n            <DatePicker\r\n              selected={startDate}\r\n              onChange={(date) => setStartDate(date)}\r\n              minDate={new Date()}\r\n              customInput={<DateTimeInput />}\r\n            />\r\n          </div>\r\n          <Button onClick={handleScheduleBtn} classNames='btn__sch'>\r\n            Schedule\r\n          </Button>\r\n        </Modal>\r\n      )}\r\n      <div className='call-log__container'>\r\n        <div className='missed__call call__common'>\r\n          <h2 className='text-center'>Missed Calls</h2>\r\n          {missedCall.length > 0 ? (\r\n            <CallLogCard\r\n              callLogs={missedCall}\r\n              isSchedule={true}\r\n              onSchedule={handleScheduleCall}\r\n            />\r\n          ) : (\r\n            <h4 className='text-center'>No Missed Calls</h4>\r\n          )}\r\n        </div>\r\n        <div className='completed__call call__common'>\r\n          <h2 className='text-center'>Completed Calls</h2>\r\n          {completedCall.length > 0 ? (\r\n            <CallLogCard callLogs={completedCall} />\r\n          ) : (\r\n            <h4 className='text-center'>No Completed Calls</h4>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default CallLogPage\r\n","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\CallLogCard.js",[],["196","197"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\DateTimeInput.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\services\\socket.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\ResetPasswordPage.js",["198"],"import React, { useEffect, useState, useRef } from 'react'\r\nimport { useForm } from 'react-hook-form'\r\nimport toast from 'react-hot-toast'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\n\r\nimport Button from 'components/shared/Forms/Button'\r\nimport PasswordInput from 'components/shared/Forms/PasswordInput'\r\nimport LoadingSpinner from 'components/shared/UI/LoadingSpinner'\r\n\r\nimport client from 'services/client'\r\n\r\nconst ResetPasswordPage = () => {\r\n  const { handleSubmit, register, errors, watch } = useForm()\r\n  const pass = useRef()\r\n  pass.current = watch('password', '')\r\n  const history = useHistory()\r\n  const params = useParams()\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  const onSubmit = async ({ password }) => {\r\n    try {\r\n      setLoading(true)\r\n      await client.post(`/auth/resetpassword/${params.token}`, { password })\r\n      setLoading(false)\r\n      toast.success('Password Reset Success! Please login')\r\n      setTimeout(() => {\r\n        history.replace('/login')\r\n      }, 2000)\r\n    } catch (error) {\r\n      setLoading(false)\r\n      toast.error(\r\n        error.response?.data.msg || 'Something Went Wrong, Please try again!'\r\n      )\r\n      setTimeout(() => {\r\n        history.replace('/login')\r\n      }, 2000)\r\n    }\r\n  }\r\n  return (\r\n    <div className='center'>\r\n      {loading && <LoadingSpinner asOverlay />}\r\n      <div className='form__wrapper'>\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <h2 className='text-center'>Reset Your Password</h2>\r\n\r\n          <PasswordInput\r\n            label='Password'\r\n            name='password'\r\n            placeholder='********'\r\n            myRef={register({\r\n              required: 'Please enter your password',\r\n              minLength: {\r\n                value: 8,\r\n                message: 'Password must be atleast 8 characters long',\r\n              },\r\n            })}\r\n            error={errors.password}\r\n          />\r\n          <PasswordInput\r\n            label='Repeat Password'\r\n            name='repeatpassword'\r\n            placeholder='********'\r\n            myRef={register({\r\n              validate: (value) =>\r\n                value === pass.current || 'The passwords do not match',\r\n            })}\r\n            error={errors.repeatpassword}\r\n          />\r\n\r\n          <Button classNames='full' type='submit'>\r\n            Reset Password\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ResetPasswordPage\r\n",["199","200"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\ForgotPasswordPage.js",[],{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","severity":1,"message":"206","line":26,"column":6,"nodeType":"207","endLine":26,"endColumn":8,"suggestions":"208"},{"ruleId":"201","replacedBy":"209"},{"ruleId":"203","replacedBy":"210"},{"ruleId":"201","replacedBy":"211"},{"ruleId":"203","replacedBy":"212"},{"ruleId":"201","replacedBy":"213"},{"ruleId":"203","replacedBy":"214"},{"ruleId":"205","severity":1,"message":"215","line":44,"column":6,"nodeType":"207","endLine":44,"endColumn":17,"suggestions":"216"},{"ruleId":"201","replacedBy":"217"},{"ruleId":"203","replacedBy":"218"},{"ruleId":"201","replacedBy":"219"},{"ruleId":"203","replacedBy":"220"},{"ruleId":"201","replacedBy":"221"},{"ruleId":"203","replacedBy":"222"},{"ruleId":"223","severity":1,"message":"224","line":6,"column":28,"nodeType":"225","messageId":"226","endLine":6,"endColumn":35},{"ruleId":"201","replacedBy":"227"},{"ruleId":"203","replacedBy":"228"},{"ruleId":"201","replacedBy":"229"},{"ruleId":"203","replacedBy":"230"},{"ruleId":"201","replacedBy":"231"},{"ruleId":"203","replacedBy":"232"},{"ruleId":"201","replacedBy":"233"},{"ruleId":"203","replacedBy":"234"},{"ruleId":"205","severity":1,"message":"235","line":44,"column":6,"nodeType":"207","endLine":44,"endColumn":8,"suggestions":"236"},{"ruleId":"201","replacedBy":"237"},{"ruleId":"203","replacedBy":"238"},{"ruleId":"205","severity":1,"message":"235","line":72,"column":6,"nodeType":"207","endLine":72,"endColumn":8,"suggestions":"239"},{"ruleId":"205","severity":1,"message":"240","line":42,"column":6,"nodeType":"207","endLine":42,"endColumn":17,"suggestions":"241"},{"ruleId":"223","severity":1,"message":"242","line":1,"column":8,"nodeType":"225","messageId":"226","endLine":1,"endColumn":14},{"ruleId":"223","severity":1,"message":"243","line":4,"column":10,"nodeType":"225","messageId":"226","endLine":4,"endColumn":15},{"ruleId":"223","severity":1,"message":"244","line":4,"column":17,"nodeType":"225","messageId":"226","endLine":4,"endColumn":25},{"ruleId":"223","severity":1,"message":"245","line":9,"column":10,"nodeType":"225","messageId":"226","endLine":9,"endColumn":19},{"ruleId":"223","severity":1,"message":"246","line":9,"column":21,"nodeType":"225","messageId":"226","endLine":9,"endColumn":33},{"ruleId":"223","severity":1,"message":"247","line":12,"column":10,"nodeType":"225","messageId":"226","endLine":12,"endColumn":16},{"ruleId":"205","severity":1,"message":"248","line":60,"column":6,"nodeType":"207","endLine":60,"endColumn":8,"suggestions":"249"},{"ruleId":"205","severity":1,"message":"235","line":58,"column":6,"nodeType":"207","endLine":58,"endColumn":8,"suggestions":"250"},{"ruleId":"223","severity":1,"message":"251","line":73,"column":13,"nodeType":"225","messageId":"226","endLine":73,"endColumn":19},{"ruleId":"201","replacedBy":"252"},{"ruleId":"203","replacedBy":"253"},{"ruleId":"223","severity":1,"message":"254","line":1,"column":17,"nodeType":"225","messageId":"226","endLine":1,"endColumn":26},{"ruleId":"201","replacedBy":"255"},{"ruleId":"203","replacedBy":"256"},"no-native-reassign",["257"],"no-negated-in-lhs",["258"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadUser'. Either include it or remove the dependency array.","ArrayExpression",["259"],["257"],["258"],["257"],["258"],["257"],["258"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["260"],["257"],["258"],["257"],["258"],["257"],["258"],"no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar",["257"],["258"],["257"],["258"],["257"],["258"],["257"],["258"],"React Hook useEffect has a missing dependency: 'user._id'. Either include it or remove the dependency array.",["261"],["257"],["258"],["262"],"React Hook useEffect has a missing dependency: 'params.id'. Either include it or remove the dependency array.",["263"],"'Button' is defined but never used.","'FiMic' is defined but never used.","'FiMicOff' is defined but never used.","'muteAudio' is assigned a value but never used.","'setMuteAudio' is assigned a value but never used.","'nanoid' is defined but never used.","React Hook useEffect has missing dependencies: 'petId' and 'roomName'. Either include them or remove the dependency array.",["264"],["265"],"'schRes' is assigned a value but never used.",["257"],["258"],"'useEffect' is defined but never used.",["257"],["258"],"no-global-assign","no-unsafe-negation",{"desc":"266","fix":"267"},{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},{"desc":"270","fix":"272"},{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},{"desc":"270","fix":"277"},"Update the dependencies array to be: [loadUser]",{"range":"278","text":"279"},"Update the dependencies array to be: [user, user._id]",{"range":"280","text":"281"},"Update the dependencies array to be: [user._id]",{"range":"282","text":"283"},{"range":"284","text":"283"},"Update the dependencies array to be: [params.id, user.name]",{"range":"285","text":"286"},"Update the dependencies array to be: [petId, roomName]",{"range":"287","text":"288"},{"range":"289","text":"283"},[931,933],"[loadUser]",[1218,1229],"[user, user._id]",[1500,1502],"[user._id]",[2277,2279],[1254,1265],"[params.id, user.name]",[1974,1976],"[petId, roomName]",[1955,1957]]