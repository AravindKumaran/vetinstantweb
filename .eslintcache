[{"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\index.js":"1","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\App.js":"2","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\RegisterPage.js":"3","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\services\\client.js":"4","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\NotFound.js":"5","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\VideoCallPage.js":"6","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\CallLogPage.js":"7","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\PrescriptionPage.js":"8","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\services\\socket.js":"9","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\AddDoctorDetails.js":"10","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\UI\\Backdrop.js":"11","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\Button.js":"12","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\NavLinks.js":"13","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\HomePage.js":"14","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\PendingCallPage.js":"15","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\PasswordInput.js":"16","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\UI\\Modal.js":"17","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\routing\\PrivateRoute.js":"18","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\context\\use-auth.js":"19","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\ForgotPasswordPage.js":"20","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\ChatPage.js":"21","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\ResetPasswordPage.js":"22","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\videoCall\\Room.js":"23","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\Select.js":"24","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\Input.js":"25","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\LoginPage.js":"26","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\admin\\DashBoard.js":"27","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\videoCall\\Participant.js":"28","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\routing\\AdminRoute.js":"29","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\PatientListPage.js":"30","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\CallLogCard.js":"31","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\admin\\Hospitals.js":"32","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\reportWebVitals.js":"33","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\UI\\LoadingSpinner.js":"34","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\Layout.js":"35","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\DateTimeInput.js":"36","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\Header.js":"37"},{"size":469,"mtime":1616240214631,"results":"38","hashOfConfig":"39"},{"size":2328,"mtime":1616242064757,"results":"40","hashOfConfig":"39"},{"size":4652,"mtime":1616235685879,"results":"41","hashOfConfig":"39"},{"size":202,"mtime":1616415987935,"results":"42","hashOfConfig":"39"},{"size":439,"mtime":1612951058953,"results":"43","hashOfConfig":"39"},{"size":3242,"mtime":1616407765590,"results":"44","hashOfConfig":"39"},{"size":5078,"mtime":1615875342380,"results":"45","hashOfConfig":"39"},{"size":4392,"mtime":1616230136488,"results":"46","hashOfConfig":"39"},{"size":248,"mtime":1616415995118,"results":"47","hashOfConfig":"39"},{"size":10688,"mtime":1614862569060,"results":"48","hashOfConfig":"39"},{"size":278,"mtime":1613027244048,"results":"49","hashOfConfig":"39"},{"size":322,"mtime":1612933214649,"results":"50","hashOfConfig":"39"},{"size":1404,"mtime":1616242085407,"results":"51","hashOfConfig":"39"},{"size":5472,"mtime":1616230875878,"results":"52","hashOfConfig":"39"},{"size":17766,"mtime":1616406989783,"results":"53","hashOfConfig":"39"},{"size":1246,"mtime":1613104033191,"results":"54","hashOfConfig":"39"},{"size":637,"mtime":1613027629282,"results":"55","hashOfConfig":"39"},{"size":537,"mtime":1616389084209,"results":"56","hashOfConfig":"39"},{"size":4181,"mtime":1616388819953,"results":"57","hashOfConfig":"39"},{"size":1950,"mtime":1613560487490,"results":"58","hashOfConfig":"39"},{"size":5130,"mtime":1614683329388,"results":"59","hashOfConfig":"39"},{"size":2475,"mtime":1613560798652,"results":"60","hashOfConfig":"39"},{"size":2067,"mtime":1613131046059,"results":"61","hashOfConfig":"39"},{"size":688,"mtime":1612953030861,"results":"62","hashOfConfig":"39"},{"size":969,"mtime":1612933219433,"results":"63","hashOfConfig":"39"},{"size":4569,"mtime":1616235668367,"results":"64","hashOfConfig":"39"},{"size":3778,"mtime":1616395405946,"results":"65","hashOfConfig":"39"},{"size":2923,"mtime":1613194297479,"results":"66","hashOfConfig":"39"},{"size":508,"mtime":1616231475105,"results":"67","hashOfConfig":"39"},{"size":11142,"mtime":1616397172222,"results":"68","hashOfConfig":"39"},{"size":1301,"mtime":1613472225545,"results":"69","hashOfConfig":"39"},{"size":3523,"mtime":1616391908563,"results":"70","hashOfConfig":"39"},{"size":362,"mtime":1606886196678,"results":"71","hashOfConfig":"39"},{"size":272,"mtime":1612932227806,"results":"72","hashOfConfig":"39"},{"size":235,"mtime":1613037914716,"results":"73","hashOfConfig":"39"},{"size":465,"mtime":1613475664031,"results":"74","hashOfConfig":"39"},{"size":354,"mtime":1615267948014,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"1iylv84",{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"92"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"96"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"92"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"100"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"92"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\index.js",[],["166","167"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\App.js",["168","169"],"import React, { useEffect } from 'react'\r\nimport { Route, Switch } from 'react-router-dom'\r\nimport { Toaster } from 'react-hot-toast'\r\nimport { useAuth } from 'context/use-auth'\r\nimport PrivateRoute from 'routing/PrivateRoute'\r\nimport AdminRoute from 'routing/AdminRoute'\r\n\r\nimport LoginPage from 'pages/auth/LoginPage'\r\nimport RegisterPage from 'pages/auth/RegisterPage'\r\nimport HomePage from 'pages/doctor/HomePage'\r\nimport PatientListPage from 'pages/doctor/PatientListPage'\r\nimport NotFound from 'pages/NotFound'\r\nimport PrescriptionPage from 'pages/doctor/PrescriptionPage'\r\nimport VideoCallPage from 'pages/doctor/VideoCallPage'\r\nimport ChatPage from 'pages/doctor/ChatPage'\r\nimport CallLogPage from 'pages/doctor/CallLogPage'\r\nimport ForgotPasswordPage from 'pages/auth/ForgotPasswordPage'\r\nimport ResetPasswordPage from 'pages/auth/ResetPasswordPage'\r\nimport PendingCallPage from 'pages/doctor/PendingCallPage'\r\n\r\nimport DashBoard from 'pages/admin/DashBoard'\r\nimport Hospitals from 'pages/admin/Hospitals'\r\n\r\nconst App = () => {\r\n  const { loadUser, token } = useAuth()\r\n\r\n  useEffect(() => {\r\n    if (localStorage.token) {\r\n      loadUser()\r\n    }\r\n  }, [token !== null])\r\n\r\n  return (\r\n    <>\r\n      <Toaster />\r\n      <Switch>\r\n        <PrivateRoute exact path='/' component={HomePage} />\r\n        <AdminRoute exact path='/dashboard' component={DashBoard} />\r\n        <AdminRoute exact path='/hospitals' component={Hospitals} />\r\n        <PrivateRoute exact path='/patientList' component={PatientListPage} />\r\n        <PrivateRoute exact path='/prescription' component={PrescriptionPage} />\r\n        <PrivateRoute exact path='/video-call/:id' component={VideoCallPage} />\r\n        <PrivateRoute exact path='/chat/:id' component={ChatPage} />\r\n        <PrivateRoute exact path='/call-log' component={CallLogPage} />\r\n        <PrivateRoute\r\n          exact\r\n          path='/call-log/pending'\r\n          component={PendingCallPage}\r\n        />\r\n        <Route path='/register' component={RegisterPage} />\r\n        <Route path='/login' component={LoginPage} />\r\n        <Route path='/forgotPassword' component={ForgotPasswordPage} />\r\n        <Route path='/passwordreset/:token' component={ResetPasswordPage} />\r\n        <Route path='/*' component={NotFound} />\r\n      </Switch>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n",["170","171"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\RegisterPage.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\services\\client.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\NotFound.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\VideoCallPage.js",["172","173"],"import React, { useState, useEffect, useCallback } from 'react'\r\nimport { useParams, useLocation } from 'react-router-dom'\r\nimport { useAuth } from 'context/use-auth'\r\nimport toast from 'react-hot-toast'\r\n\r\nimport LoadingSpinner from 'components/shared/UI/LoadingSpinner'\r\nimport client from 'services/client'\r\nimport Layout from 'components/layouts/Layout'\r\nimport Room from 'components/videoCall/Room'\r\n\r\nimport './VideoCallPage.css'\r\n\r\nconst VideoCallPage = () => {\r\n  const params = useParams()\r\n  const location = useLocation()\r\n  console.log('Location', location.state.item)\r\n  const { user } = useAuth()\r\n  const [token, setToken] = useState(null)\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  const handleDeleteCall = async () => {\r\n    // const callRes = await pendingsApi.singleCallPending(\r\n    //   route.params?.item._id\r\n    // )\r\n    // if (callRes.ok) {\r\n    //   const call = callRes.data.call\r\n    //   call.userJoined && call.docJoined\r\n    //     ? await pendingsApi.deleteCallPending(call._id)\r\n    //     : await pendingsApi.updateCallPending(call._id, {\r\n    //         userJoined: false,\r\n    //       })\r\n    // }\r\n    const item = location.state.item\r\n    try {\r\n      const cRes = await client.get(`/pendingcalls/${item._id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.token}`,\r\n        },\r\n      })\r\n\r\n      const call = cRes.data.call\r\n      call.userJoined && call.docJoined\r\n        ? await client.delete(`/pendingcalls/${item._id}`, {\r\n            headers: {\r\n              Authorization: `Bearer ${localStorage.token}`,\r\n            },\r\n          })\r\n        : await client.patch(\r\n            `/pendingcalls/${item._id}`,\r\n            { docJoined: false },\r\n            {\r\n              headers: {\r\n                Authorization: `Bearer ${localStorage.token}`,\r\n              },\r\n            }\r\n          )\r\n    } catch (error) {\r\n      console.log('Error', error)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const getVideoToken = async () => {\r\n      try {\r\n        setLoading(true)\r\n        await client.patch(\r\n          `/pendingcalls/${location.state.item._id}`,\r\n          { docJoined: true },\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${localStorage.token}`,\r\n            },\r\n          }\r\n        )\r\n        const tokenRes = await client.post(\r\n          `/users/getToken`,\r\n          {\r\n            userName: user.name,\r\n            roomName: params.id,\r\n          },\r\n          {\r\n            headers: { Authorization: `Bearer ${localStorage.token}` },\r\n          }\r\n        )\r\n        setToken(tokenRes.data)\r\n        setLoading(false)\r\n      } catch (error) {\r\n        console.log('Error', error)\r\n        toast.error('Something went wrong! Please try again later!')\r\n        setLoading(false)\r\n      }\r\n    }\r\n    getVideoToken()\r\n  }, [user.name])\r\n\r\n  const handleLogout = useCallback((event) => {\r\n    handleDeleteCall()\r\n    setToken(null)\r\n    window.location.href = '/'\r\n  }, [])\r\n\r\n  return (\r\n    <Layout>\r\n      {loading && <LoadingSpinner asOverlay />}\r\n      {token && (\r\n        <Room roomName={params.id} token={token} handleLogout={handleLogout} />\r\n      )}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default VideoCallPage\r\n",["174","175"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\CallLogPage.js",["176","177"],"import React, { useState, useEffect } from 'react'\r\nimport Layout from 'components/layouts/Layout'\r\n\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport './CallLogPage.css'\r\nimport client from 'services/client'\r\nimport { useAuth } from 'context/use-auth'\r\nimport LoadingSpinner from 'components/shared/UI/LoadingSpinner'\r\nimport CallLogCard from 'components/layouts/CallLogCard'\r\nimport toast from 'react-hot-toast'\r\n\r\nimport Backdrop from 'components/shared/UI/Backdrop'\r\nimport Modal from 'components/shared/UI/Modal'\r\n\r\nimport DatePicker from 'react-datepicker'\r\nimport DateTimeInput from 'components/layouts/DateTimeInput'\r\nimport Button from 'components/shared/Forms/Button'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst CallLogPage = () => {\r\n  const { user } = useAuth()\r\n  const [missedCall, setMissedCall] = useState([])\r\n  const [completedCall, setCompletedCall] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n  const [open, setOpen] = useState(false)\r\n  const [currentCall, setCurrentCall] = useState()\r\n  const [startDate, setStartDate] = useState(new Date())\r\n  const [startTime, setStartTime] = useState(new Date())\r\n\r\n  useEffect(() => {\r\n    const getMissedCall = async () => {\r\n      setLoading(true)\r\n      try {\r\n        const res = await client.get(`/calllogs?receiverId=${user._id}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        })\r\n\r\n        const callLogsArray = res.data.callLogs\r\n        const msCall = []\r\n        const cmCall = []\r\n        callLogsArray.forEach((log) => {\r\n          if (log.callPending) {\r\n            msCall.push(log)\r\n          } else {\r\n            cmCall.push(log)\r\n          }\r\n        })\r\n\r\n        setMissedCall(msCall)\r\n        setCompletedCall(cmCall)\r\n        setLoading(false)\r\n      } catch (error) {\r\n        setLoading(false)\r\n        toast.error(\r\n          error.response.data?.msg ||\r\n            'Something Went Wrong! Please try again later!'\r\n        )\r\n      }\r\n    }\r\n\r\n    getMissedCall()\r\n  }, [])\r\n\r\n  const toggleModal = () => {\r\n    setOpen(!open)\r\n  }\r\n\r\n  const handleScheduleCall = (call) => {\r\n    toggleModal()\r\n    setCurrentCall(call)\r\n  }\r\n\r\n  const handleScheduleBtn = async () => {\r\n    startDate.setTime(startTime.getTime())\r\n    setLoading(true)\r\n    try {\r\n      const schRes = await client.post(\r\n        '/scheduledCalls',\r\n        {\r\n          date: startDate,\r\n          userId: currentCall.senderId._id,\r\n          doctorId: currentCall.receiverId._id,\r\n          doctorName: currentCall.receiverId.name,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        }\r\n      )\r\n\r\n      setLoading(false)\r\n      toast.success('Your Call has been schedule')\r\n      window.location.href = '/'\r\n    } catch (error) {\r\n      setLoading(false)\r\n      toast.error(\r\n        error.response.data?.msg ||\r\n          'Something Went Wrong! Please try again later!'\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      {loading && <LoadingSpinner asOverlay />}\r\n      {open && <Backdrop toggle={toggleModal} />}\r\n      {open && (\r\n        <Modal toggle={toggleModal} title='Schedule Call'>\r\n          <div className='sch__modal'>\r\n            <h4>Select Time</h4>\r\n            <DatePicker\r\n              selected={startTime}\r\n              onChange={(date) => setStartTime(date)}\r\n              showTimeSelect\r\n              showTimeSelectOnly\r\n              timeIntervals={15}\r\n              timeCaption='Time'\r\n              dateFormat='h:mm aa'\r\n              customInput={<DateTimeInput time={true} />}\r\n            />\r\n\r\n            <h4>Choose Date</h4>\r\n            <DatePicker\r\n              selected={startDate}\r\n              onChange={(date) => setStartDate(date)}\r\n              minDate={new Date()}\r\n              customInput={<DateTimeInput />}\r\n            />\r\n          </div>\r\n          <Button onClick={handleScheduleBtn} classNames='btn__sch'>\r\n            Schedule\r\n          </Button>\r\n        </Modal>\r\n      )}\r\n      <div className='flex-center'>\r\n        <Link to='/call-log/pending' className='btn'>\r\n          See Pending Calls\r\n        </Link>\r\n      </div>\r\n      <div className='call-log__container'>\r\n        <div className='missed__call call__common'>\r\n          <h2 className='text-center'>Missed Calls</h2>\r\n          {missedCall.length > 0 ? (\r\n            <CallLogCard\r\n              callLogs={missedCall}\r\n              isSchedule={true}\r\n              onSchedule={handleScheduleCall}\r\n            />\r\n          ) : (\r\n            <h4 className='text-center'>No Missed Calls</h4>\r\n          )}\r\n        </div>\r\n        <div className='completed__call call__common'>\r\n          <h2 className='text-center'>Completed Calls</h2>\r\n          {completedCall.length > 0 ? (\r\n            <CallLogCard callLogs={completedCall} />\r\n          ) : (\r\n            <h4 className='text-center'>No Completed Calls</h4>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default CallLogPage\r\n",["178","179"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\PrescriptionPage.js",["180"],"import React, { useEffect, useState } from 'react'\r\nimport * as Yup from 'yup'\r\nimport { useForm } from 'react-hook-form'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport { useAuth } from 'context/use-auth'\r\nimport toast from 'react-hot-toast'\r\nimport Layout from 'components/layouts/Layout'\r\n\r\nimport './PrescriptionPage.css'\r\nimport LoadingSpinner from 'components/shared/UI/LoadingSpinner'\r\nimport Select from 'components/shared/Forms/Select'\r\nimport Input from 'components/shared/Forms/Input'\r\nimport Button from 'components/shared/Forms/Button'\r\nimport client from 'services/client'\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  patientName: Yup.string()\r\n    .required('Please select a patient')\r\n    .label('Patient Name'),\r\n  prescription: Yup.string().max(300).required().label('Prescription'),\r\n  photo: Yup.mixed()\r\n    .test(\r\n      'imageSize',\r\n      'Please select a .jpeg/.jpg image of size less than 1 Mb',\r\n      (value) => {\r\n        if (value && value[0].type !== 'image/jpeg') {\r\n          return false\r\n        }\r\n        return value && value[0].size <= 1000000\r\n      }\r\n    )\r\n    .label('Image'),\r\n})\r\n\r\nconst PrescriptionPage = () => {\r\n  const { handleSubmit, register, errors } = useForm({\r\n    resolver: yupResolver(validationSchema),\r\n  })\r\n\r\n  const { user } = useAuth()\r\n  const [patients, setPatients] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const getPatients = async () => {\r\n      setLoading(true)\r\n      try {\r\n        const res = await client.get(`/rooms/receiver/${user._id}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        })\r\n        let pateintss = res.data.room\r\n        let newPatients = pateintss.reduce((acc, item) => {\r\n          acc.push({\r\n            label:\r\n              item.senderName.charAt(0).toUpperCase() +\r\n              item.senderName.slice(1),\r\n            value: item.petId,\r\n          })\r\n          return acc\r\n        }, [])\r\n        setPatients(newPatients)\r\n        setLoading(false)\r\n      } catch (error) {\r\n        // console.log(error)\r\n        toast.error('Something Went Wrong! Please try again later!')\r\n        setLoading(false)\r\n      }\r\n    }\r\n    getPatients()\r\n  }, [])\r\n\r\n  const onSubmit = async (data) => {\r\n    const formData = new FormData()\r\n    if (data.photo[0]) {\r\n      formData.append('photo', data.photo[0])\r\n    }\r\n    formData.append('prescription', data.prescription)\r\n    formData.append('docname', user.name)\r\n    for (var key of formData.entries()) {\r\n      console.log(key[0] + ', ' + key[1])\r\n    }\r\n\r\n    try {\r\n      setLoading(true)\r\n      const petRes = await client.patch(\r\n        `/pets/prescription/${data.patientName}`,\r\n        formData,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        }\r\n      )\r\n      console.log('PetRes', petRes)\r\n      toast.success('Prescription Send Successfully!')\r\n      setLoading(false)\r\n    } catch (error) {\r\n      console.log('Error', error)\r\n      toast.error('Something Went Wrong! Please try again later!')\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <div className='center'>\r\n        {loading && <LoadingSpinner asOverlay />}\r\n        <div className='prescription'>\r\n          <h3 className='text-center'> Please Provide Your Prescription </h3>\r\n          <form onSubmit={handleSubmit(onSubmit)}>\r\n            <Select\r\n              label='Select Patient Name'\r\n              data={patients}\r\n              name='patientName'\r\n              myRef={register}\r\n              error={errors.patientName}\r\n            />\r\n            <Input\r\n              label='Prescription'\r\n              placeholder='Enter your prescription'\r\n              element='textarea'\r\n              rows={5}\r\n              name='prescription'\r\n              myRef={register}\r\n              error={errors.prescription}\r\n            />\r\n            <Input\r\n              type='file'\r\n              label='Select image'\r\n              name='photo'\r\n              myRef={register}\r\n              error={errors.photo}\r\n            />\r\n            <Button classNames='full' type='submit'>\r\n              Send Prescription\r\n            </Button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default PrescriptionPage",["181","182"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\services\\socket.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\AddDoctorDetails.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\UI\\Backdrop.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\Button.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\NavLinks.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\HomePage.js",["183","184","185"],"import React, { useEffect, useState } from 'react'\r\nimport { useAuth } from 'context/use-auth'\r\nimport client from 'services/client'\r\nimport toast from 'react-hot-toast'\r\n\r\nimport Layout from 'components/layouts/Layout'\r\nimport LoadingSpinner from 'components/shared/UI/LoadingSpinner'\r\nimport AddDoctorDetails from 'components/layouts/AddDoctorDetails'\r\n\r\nimport './HomePage.css'\r\nimport socket from 'services/socket'\r\nimport Admin from '../doctor/Admin'\r\n\r\nconst HomePage = () => {\r\n  const { loadUser, user } = useAuth()\r\n  const [loading, setLoading] = useState(false)\r\n  const [doctorDetails, setDoctorDetails] = useState()\r\n\r\n  useEffect(() => {\r\n    const data = async () => {\r\n      await loadUser()\r\n      const sendPushToken = async (token, message, status) => {\r\n        setLoading(true)\r\n\r\n        const pushData = {\r\n          targetExpoPushToken: token,\r\n          title: `Response from Dr. ${user.name}`,\r\n          message: message,\r\n          datas: { token: user.token || null, status },\r\n        }\r\n        try {\r\n          await client.post('/users/sendNotification', pushData, {\r\n            headers: {\r\n              Authorization: `Bearer ${localStorage.token}`,\r\n            },\r\n          })\r\n          setLoading(false)\r\n        } catch (err) {\r\n          setLoading(false)\r\n          toast.error(\r\n            err.response?.data.msg || 'Something Went Wrong! Try Again Later'\r\n          )\r\n        }\r\n      }\r\n      socket.on('videoCall', (data) => {\r\n        console.log('SocketData', data, user)\r\n        if (user) {\r\n          if (data.docId === user?._id && data.paymentDone === false) {\r\n            if (\r\n              window.confirm(\r\n                `Incoming Call Request from pet Owner ${data.name}`\r\n              )\r\n            ) {\r\n              sendPushToken(\r\n                data.token,\r\n                \"Yes I'm available. Complete The Payment Within 5-10 Minutes\",\r\n                'ok'\r\n              )\r\n            } else {\r\n              sendPushToken(\r\n                data.token,\r\n                `Sorry! I'm Not Available. Please Try With Other Available Doctors`,\r\n                'cancel'\r\n              )\r\n            }\r\n          }\r\n\r\n          if (data.docId === user._id && data.paymentDone === true) {\r\n            alert(\r\n              `Pet Owner ${data.name} Response! \\n I have started the call Please join it.`\r\n            )\r\n          }\r\n        }\r\n      })\r\n    }\r\n    data()\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  // useEffect(() => {\r\n\r\n  // }, [])\r\n\r\n  useEffect(() => {\r\n    const getDoctorDetails = async () => {\r\n      try {\r\n        setLoading(true)\r\n        const res = await client.get(`/doctors/user/${user._id}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        })\r\n        setDoctorDetails(res.data?.doctor)\r\n        setLoading(false)\r\n      } catch (err) {\r\n        if (err.response?.data?.msg) {\r\n          toast.error('Please add your details below')\r\n        }\r\n\r\n        setLoading(false)\r\n      }\r\n    }\r\n    if (user) {\r\n      getDoctorDetails()\r\n    }\r\n  }, [user?._id])\r\n\r\n  return (\r\n    <Layout>\r\n      {loading && <LoadingSpinner asOverlay />}\r\n      {user && (\r\n        <h2 className='doc__title text-center'>Welcome Doctor {user.name}</h2>\r\n      )}\r\n      {doctorDetails ? (\r\n        <div className='doctor'>\r\n          <h4>Details: </h4>\r\n          <div className='doctor__card'>\r\n            <h5>Registration Number :</h5>\r\n            <p>{doctorDetails.regNo}</p>\r\n          </div>\r\n          <div className='doctor__card'>\r\n            <h5>Phone Number:</h5>\r\n            <p>{doctorDetails.phone}</p>\r\n          </div>\r\n          <div className='doctor__card'>\r\n            <h5>Hospital/Clinic Name :</h5>\r\n            <p>{doctorDetails?.hospital?.name}</p>\r\n          </div>\r\n          <div className='doctor__card'>\r\n            <h5>Consultation Fees :</h5>\r\n            <p>₹ {doctorDetails.fee}</p>\r\n          </div>\r\n          <div className='doctor__card'>\r\n            <h5> Qualifications :</h5>\r\n            <p>{doctorDetails.qlf}</p>\r\n          </div>\r\n\r\n          {+doctorDetails.fee > 0 && (\r\n            <>\r\n              <h4>Billing Details: </h4>\r\n              <div className='doctor__card'>\r\n                <h5>Bank Account Number :</h5>\r\n                <p>{doctorDetails.accno}</p>\r\n              </div>\r\n              <div className='doctor__card'>\r\n                <h5>Account Holder Name :</h5>\r\n                <p>{doctorDetails.accname}</p>\r\n              </div>\r\n              <div className='doctor__card'>\r\n                <h5>Account Type :</h5>\r\n                <p>{doctorDetails.acctype}</p>\r\n              </div>\r\n              <div className='doctor__card'>\r\n                <h5>IFSC Code :</h5>\r\n                <p>{doctorDetails.ifsc}</p>\r\n              </div>\r\n            </>\r\n          )}\r\n\r\n          <div className='doctor__card'>\r\n            <h5>Registration Certificate :</h5>\r\n            <a\r\n              style={{ cursor: 'pointer' }}\r\n              href={doctorDetails.file}\r\n              target='_blank'\r\n            >\r\n              {doctorDetails.file.split('/documents/')[1]}\r\n            </a>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <h3 className='text-center py-10'>Add Your Details Below!</h3>\r\n          <AddDoctorDetails />\r\n        </>\r\n      )}\r\n      {/* <Admin /> */}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default HomePage\r\n","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\PendingCallPage.js",["186","187"],"import React, { useState, useEffect } from 'react'\r\nimport dayjs from 'dayjs'\r\nimport isSameOrAfter from 'dayjs/plugin/isSameOrAfter'\r\n\r\nimport toast from 'react-hot-toast'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { useAuth } from 'context/use-auth'\r\nimport client from 'services/client'\r\nimport Layout from 'components/layouts/Layout'\r\nimport './PendingCallPage.css'\r\nimport Button from 'components/shared/Forms/Button'\r\nimport Backdrop from 'components/shared/UI/Backdrop'\r\nimport Modal from 'components/shared/UI/Modal'\r\nimport LoadingSpinner from 'components/shared/UI/LoadingSpinner'\r\nimport DatePicker from 'react-datepicker'\r\nimport DateTimeInput from 'components/layouts/DateTimeInput'\r\n\r\ndayjs.extend(isSameOrAfter)\r\n\r\nconst PendingCallPage = () => {\r\n  const { user } = useAuth()\r\n  const [pendingCalls, setPendingCalls] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n  const [pet, setPet] = useState(null)\r\n  const [curItem, setCurItem] = useState(null)\r\n  const [open, setOpen] = useState(false)\r\n  const [openSch, setOpenSch] = useState(false)\r\n  const [petLoading, setPetLoading] = useState(false)\r\n  const [startDate, setStartDate] = useState(new Date())\r\n  const [startTime, setStartTime] = useState(new Date())\r\n\r\n  const getUserPendingCalls = async () => {\r\n    setLoading(true)\r\n    try {\r\n      const pres = await client.get(`/pendingcalls/doctor/${user._id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.token}`,\r\n        },\r\n      })\r\n\r\n      //   console.log('Ress', pres.data)\r\n      setPendingCalls(pres.data.calls)\r\n      setLoading(false)\r\n    } catch (error) {\r\n      setLoading(false)\r\n      toast.error(\r\n        error.response?.data?.msg ||\r\n          'Something Went Wrong! Please try again later!'\r\n      )\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getUserPendingCalls()\r\n  }, [])\r\n\r\n  const handleBtns = async (item, str) => {\r\n    const allPCalls = [...pendingCalls]\r\n    const pCall = allPCalls.find((p) => p._id === item._id)\r\n    if (pCall) {\r\n      pCall.status = str\r\n    }\r\n    setLoading(true)\r\n    try {\r\n      const pres = await client.patch(`/pendingcalls/${item._id}`, pCall, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.token}`,\r\n        },\r\n      })\r\n\r\n      setLoading(false)\r\n      setPendingCalls(allPCalls)\r\n    } catch (error) {\r\n      setLoading(false)\r\n      toast.error(\r\n        error.response?.data?.msg ||\r\n          'Something Went Wrong! Please try again later!'\r\n      )\r\n    }\r\n  }\r\n\r\n  const handleRefresh = () => {\r\n    getUserPendingCalls()\r\n  }\r\n\r\n  const toggleModal = () => {\r\n    setOpen(!open)\r\n  }\r\n  const toggleModalSch = () => {\r\n    setStartDate(new Date())\r\n    setStartTime(new Date())\r\n    setOpenSch(!openSch)\r\n  }\r\n\r\n  const onSchedule = (item) => {\r\n    setCurItem(item)\r\n    toggleModalSch()\r\n  }\r\n\r\n  const handleScheduleBtn = async () => {\r\n    const item = curItem\r\n    startDate.setTime(startTime.getTime())\r\n    setLoading(true)\r\n    const allPCalls = [...pendingCalls]\r\n    const npCall = allPCalls.find((p) => p._id === item._id)\r\n    if (npCall) {\r\n      npCall.status = 'scheduled'\r\n      npCall.extraInfo = `${startDate}`\r\n    }\r\n\r\n    try {\r\n      await client.patch(`/pendingcalls/${item._id}`, npCall, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.token}`,\r\n        },\r\n      })\r\n\r\n      await client.post(\r\n        '/scheduledCalls',\r\n        {\r\n          date: startDate,\r\n          userId: item.userId,\r\n          doctorId: item.docId,\r\n          doctorName: item.docName,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        }\r\n      )\r\n\r\n      setLoading(false)\r\n    } catch (error) {\r\n      setLoading(false)\r\n      toast.error(\r\n        error.response?.data?.msg ||\r\n          'Something Went Wrong! Please try again later!'\r\n      )\r\n    }\r\n\r\n    setPendingCalls(allPCalls)\r\n    toggleModalSch()\r\n  }\r\n\r\n  const handlePatModal = async (id) => {\r\n    toggleModal()\r\n    try {\r\n      setPetLoading(true)\r\n      const petRes = await client.get(`/pets/${id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.token}`,\r\n        },\r\n      })\r\n      // console.log('PET', petRes)\r\n      setPet(petRes.data.exPet)\r\n      setPetLoading(false)\r\n    } catch (error) {\r\n      toast.error('Something Went Wrong! Please try again later!')\r\n      setPetLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      {loading && <LoadingSpinner asOverlay />}\r\n      {open && <Backdrop toggle={toggleModal} />}\r\n      {openSch && <Backdrop toggle={toggleModalSch} />}\r\n      {open && (\r\n        <Modal toggle={toggleModal} title={`Pet Details`}>\r\n          {petLoading && <LoadingSpinner asOverlay />}\r\n          {pet && (\r\n            <div className='pet__details'>\r\n              <h5>\r\n                Date: <span>{new Date(pet.createdAt).toLocaleString()}</span>\r\n              </h5>\r\n              <h5>\r\n                Weight: <span>{pet.weight} Kg</span>\r\n              </h5>\r\n\r\n              <h5>\r\n                Gender: <span>{pet.gender}</span>\r\n              </h5>\r\n              <h5>\r\n                Species: <span>{pet.type}</span>\r\n              </h5>\r\n              <h5>\r\n                Breed: <span>{pet.breed}</span>\r\n              </h5>\r\n\r\n              <h5>\r\n                Age:\r\n                <span>\r\n                  {pet.years !== 0 && `${pet.years} Years`}{' '}\r\n                  {pet.months !== 0 && `${pet.months} Months`}\r\n                </span>\r\n              </h5>\r\n\r\n              {pet?.petHistoryImages?.length > 0 && (\r\n                <>\r\n                  <h5>Pet History Images: </h5>\r\n                  <div className='pet__history__images'>\r\n                    {pet.petHistoryImages.map((img, i) => (\r\n                      <div key={`${img}-${i}`} className='pet__history__img'>\r\n                        {/* <img\r\n                          src={`http://192.168.43.242:8000/img/${img}`}\r\n                          width='200'\r\n                          height='200'\r\n                          alt={`${pet.type}`}\r\n                        /> */}\r\n                        <img\r\n                          src={`${img}`}\r\n                          width='200'\r\n                          height='200'\r\n                          style={{ objectFit: 'cover' }}\r\n                          alt={`${pet.type}`}\r\n                        />\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </>\r\n              )}\r\n\r\n              {pet?.prescriptions?.length > 0 && <h5>Pet Prescriptions:</h5>}\r\n              {pet?.prescriptions?.length > 0 &&\r\n                pet.prescriptions.map((pr, i) => (\r\n                  <div className='py-10' key={pr._id}>\r\n                    <h5>\r\n                      {i + 1}. Prescription: <span>{pr.prescription}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Doctor's Name: <span>{pr.docname}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Date: <span>{new Date(pr.date).toLocaleString()}</span>\r\n                    </h5>\r\n                    {pr.img && (\r\n                      <>\r\n                        <h5>Prescription image</h5>\r\n                        <div className='pet__history__img'>\r\n                          {/* <img\r\n                            src={`http://192.168.43.242:8000/${pr.img}`}\r\n                            width='200'\r\n                            height='200'\r\n                            style={{ maxHeight: '200px', maxWidth: '200px' }}\r\n                            alt={`${pet.type}`}\r\n                          /> */}\r\n                          <img\r\n                            src={`${pr.img}`}\r\n                            width='200'\r\n                            height='200'\r\n                            style={{\r\n                              maxHeight: '200px',\r\n                              maxWidth: '200px',\r\n                              objectFit: 'cover',\r\n                            }}\r\n                            alt={`${pet.type}`}\r\n                          />\r\n                        </div>\r\n                      </>\r\n                    )}\r\n                    <hr />\r\n                  </div>\r\n                ))}\r\n\r\n              {pet?.problems?.length > 0 && <h5>Pet Problems: </h5>}\r\n              {pet?.problems?.length > 0 &&\r\n                pet.problems.map((pb, i) => (\r\n                  <div className='pet__problems py-10' key={pb._id}>\r\n                    <h5>\r\n                      {i + 1}. Problem: <span>{pb.problem}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Doctor's Name: <span>{pb.docname}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Time Period: <span>{pb.time}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Appetite: <span>{pb.Appetite}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Behaviour: <span>{pb.Behaviour}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Eyes: <span>{pb.Eyes}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Comment: <span>{pb.comment}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Gait: <span>{pb.Gait}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Mucous: <span>{pb.Mucous}</span>\r\n                    </h5>\r\n\r\n                    {pb.Ears?.length > 0 && <h5>Ears: </h5>}\r\n\r\n                    {pb.Ears?.length > 0 &&\r\n                      pb.Ears.map((er, i) => <h3 key={`${i}-Ears`}> {er}</h3>)}\r\n\r\n                    {pb.Feces?.length > 0 && <h5>Faces: </h5>}\r\n\r\n                    {pb.Feces?.length > 0 &&\r\n                      pb.Feces.map((fc, i) => (\r\n                        <h3 key={`Feces ${i}`}> {fc}</h3>\r\n                      ))}\r\n                    {pb.Urine?.length > 0 && <h5>Urines: </h5>}\r\n\r\n                    {pb.Urine?.length > 0 &&\r\n                      pb.Urine.map((ur, i) => (\r\n                        <h3 key={`Urines ${i}`}> {ur}</h3>\r\n                      ))}\r\n                    {pb.Skin?.length > 0 && <h5>Skins: </h5>}\r\n\r\n                    {pb.Skin?.length > 0 &&\r\n                      pb.Skin.map((sk, i) => <h3 key={`Skins ${i}`}> {sk}</h3>)}\r\n\r\n                    {pb?.images?.length && <h5>Pet Problem image</h5>}\r\n                    <div className='pet__history__images'>\r\n                      {pb?.images?.length > 0 &&\r\n                        pb.images.map((img, i) => (\r\n                          <div\r\n                            key={`${img}-${i}`}\r\n                            className='pet__history__img'\r\n                          >\r\n                            {/* <img\r\n                              src={`http://192.168.43.242:8000/${img}`}\r\n                              width='200'\r\n                              height='200'\r\n                              style={{ maxHeight: '200px', maxWidth: '200px' }}\r\n                              alt={`${pet.type}`}\r\n                            /> */}\r\n                            <img\r\n                              src={`${img}`}\r\n                              width='200'\r\n                              height='200'\r\n                              style={{\r\n                                maxHeight: '200px',\r\n                                maxWidth: '200px',\r\n                                objectFit: 'cover',\r\n                              }}\r\n                              alt={`${pet.type}`}\r\n                            />\r\n                          </div>\r\n                        ))}\r\n                    </div>\r\n                    <hr />\r\n                  </div>\r\n                ))}\r\n            </div>\r\n          )}\r\n        </Modal>\r\n      )}\r\n      {openSch && (\r\n        <Modal toggle={toggleModalSch} title='Schedule Call'>\r\n          <div className='sch__modal'>\r\n            <h4>Select Time</h4>\r\n            <DatePicker\r\n              selected={startTime}\r\n              onChange={(date) => setStartTime(date)}\r\n              showTimeSelect\r\n              showTimeSelectOnly\r\n              timeIntervals={15}\r\n              timeCaption='Time'\r\n              dateFormat='h:mm aa'\r\n              customInput={<DateTimeInput time={true} />}\r\n            />\r\n\r\n            <h4>Choose Date</h4>\r\n            <DatePicker\r\n              selected={startDate}\r\n              onChange={(date) => setStartDate(date)}\r\n              minDate={new Date()}\r\n              customInput={<DateTimeInput />}\r\n            />\r\n          </div>\r\n          <Button onClick={handleScheduleBtn} classNames='btn__sch'>\r\n            Schedule\r\n          </Button>\r\n        </Modal>\r\n      )}\r\n      <div className='pend-top'>\r\n        <h1>Your Pending Calls</h1>\r\n        <Button onClick={handleRefresh} disabled={loading}>\r\n          Refresh\r\n        </Button>\r\n      </div>\r\n\r\n      {pendingCalls.length > 0 ? (\r\n        <div className='center'>\r\n          {pendingCalls.map((item, index) => (\r\n            <div className='pend__card' key={item._id}>\r\n              <div className='pend__card__top'>\r\n                <h3 style={{ textTransform: 'capitalize' }}>{item.userName}</h3>\r\n                <Button\r\n                  classNames='pet__btn'\r\n                  onClick={() => handlePatModal(item.petId)}\r\n                >\r\n                  Pet Details\r\n                </Button>\r\n              </div>\r\n              {item.status === 'requested' && (\r\n                <>\r\n                  <p style={{ fontSize: '25px', margin: '15px 8px' }}>\r\n                    <span style={{ fontWeight: 'bold' }}>Status:</span> Patient\r\n                    Requested\r\n                  </p>\r\n                  <div className='flex-center'>\r\n                    <Button onClick={() => onSchedule(item)}>SCHEDULE</Button>\r\n                    <Button onClick={() => handleBtns(item, 'deny')}>\r\n                      DENY\r\n                    </Button>\r\n                    <Button onClick={() => handleBtns(item, 'accepted')}>\r\n                      ACCEPT\r\n                    </Button>\r\n                  </div>\r\n                </>\r\n              )}\r\n\r\n              {item.status === 'accepted' && (\r\n                <p style={{ fontSize: '25px', margin: '15px 8px' }}>\r\n                  <span style={{ fontWeight: 'bold' }}>Status:</span> Waiting\r\n                  for payment\r\n                </p>\r\n              )}\r\n\r\n              {item.status === 'paymentDone' && item.paymentDone && (\r\n                <div style={{ paddingBottom: '15px' }}>\r\n                  <p style={{ fontSize: '25px', margin: '15px 8px' }}>\r\n                    <span style={{ fontWeight: 'bold' }}>Status:</span> Payment\r\n                    Done Successfully. Please join the call\r\n                  </p>\r\n                  <Link\r\n                    to={{\r\n                      pathname: `/video-call/${item.userId}-${item.docId}`,\r\n                      state: {\r\n                        item,\r\n                      },\r\n                    }}\r\n                    className='btn full'\r\n                  >\r\n                    Join Now\r\n                  </Link>\r\n                </div>\r\n              )}\r\n\r\n              {item.status === 'scheduled' && (\r\n                <div>\r\n                  <p style={{ fontSize: '25px', margin: '15px 8px' }}>\r\n                    <span style={{ fontWeight: 'bold' }}>Status:</span> Waiting\r\n                    for payment. You have scheduled the call at{' '}\r\n                    <span style={{ fontWeight: 'bold' }}>\r\n                      {dayjs(item.extraInfo).format('hh:mm A')}\r\n                    </span>{' '}\r\n                    on{' '}\r\n                    <span style={{ fontWeight: 'bold' }}>\r\n                      {dayjs(item.extraInfo).format('DD/MM/YYYY')}\r\n                    </span>\r\n                  </p>\r\n                </div>\r\n              )}\r\n\r\n              {item.status === 'scheduledPayment' && item.paymentDone && (\r\n                <div style={{ paddingBottom: '15px' }}>\r\n                  <p style={{ fontSize: '25px', margin: '15px 8px' }}>\r\n                    <span style={{ fontWeight: 'bold' }}>Status:</span> Payment\r\n                    Done. Call Scheduled at{' '}\r\n                    <span style={{ fontWeight: 'bold' }}>\r\n                      {dayjs(item.extraInfo).format('hh:mm A')}\r\n                    </span>{' '}\r\n                    on{' '}\r\n                    <span style={{ fontWeight: 'bold' }}>\r\n                      {dayjs(item.extraInfo).format('DD/MM/YYYY')}\r\n                    </span>\r\n                  </p>\r\n                  {dayjs().isSameOrAfter(dayjs(item.extraInfo)) && (\r\n                    <Link\r\n                      to={{\r\n                        pathname: `/video-call/${item.userId}-${item.docId}`,\r\n                        state: {\r\n                          item,\r\n                        },\r\n                      }}\r\n                      className='btn full'\r\n                    >\r\n                      Join Now\r\n                    </Link>\r\n                  )}\r\n                </div>\r\n              )}\r\n\r\n              {item.status === 'deny' && (\r\n                <p style={{ fontSize: '25px', margin: '15px 8px' }}>\r\n                  <span style={{ fontWeight: 'bold' }}>Status: </span>Call has\r\n                  been denied\r\n                </p>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <h3 className='text-center'>No pending calls</h3>\r\n      )}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default PendingCallPage\r\n","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\PasswordInput.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\UI\\Modal.js",[],["188","189"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\routing\\PrivateRoute.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\context\\use-auth.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\ForgotPasswordPage.js",[],["190","191"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\ChatPage.js",["192","193"],"import React, { useState, useEffect } from 'react'\r\nimport Layout from 'components/layouts/Layout'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { useForm } from 'react-hook-form'\r\n\r\nimport Input from 'components/shared/Forms/Input'\r\nimport Button from 'components/shared/Forms/Button'\r\nimport LoadingSpinner from 'components/shared/UI/LoadingSpinner'\r\nimport { FiSend } from 'react-icons/fi'\r\nimport { useAuth } from 'context/use-auth'\r\nimport socket from 'services/socket'\r\nimport { nanoid } from 'nanoid'\r\n\r\nimport './ChatPage.css'\r\nimport client from 'services/client'\r\nimport toast from 'react-hot-toast'\r\n\r\nconst ChatPage = () => {\r\n  const { user } = useAuth()\r\n  const { handleSubmit, register, reset } = useForm()\r\n  const [messages, setMessages] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n  const loc = useLocation()\r\n  const { name: roomName, petId, senderName } = loc.state?.data\r\n\r\n  useEffect(() => {\r\n    const getAllChats = async () => {\r\n      setLoading(true)\r\n      try {\r\n        const chatRes = await client.get(`/chats/room/${roomName}/${petId}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        })\r\n        // console.log('Res', chatRes)\r\n        // const sortedChat = chatRes.data.chats.sort(\r\n        //   (a, b) => new Date(a.createdAt) - new Date(b.createdAt)\r\n        // )\r\n        const newMessages = chatRes.data.chats.map((msg) => {\r\n          return {\r\n            ...msg,\r\n            user: {\r\n              _id: msg.userId,\r\n              name: msg.userName,\r\n            },\r\n          }\r\n        })\r\n        setMessages(newMessages)\r\n        setLoading(false)\r\n\r\n        socket.emit('room', roomName)\r\n        socket.on('chat', (data) => {\r\n          // console.log('Data', sortedData)\r\n          setMessages(data)\r\n        })\r\n      } catch (error) {\r\n        console.log('Error', error)\r\n        setLoading(false)\r\n        toast.error(\r\n          error.response?.data?.msg || 'Something went wrong! Please try again!'\r\n        )\r\n      }\r\n    }\r\n\r\n    getAllChats()\r\n    // console.log('Socket', socket)\r\n  }, [])\r\n\r\n  const handleSendMessage = async ({ msg }) => {\r\n    // console.log('Mssd', msg)\r\n    const newMsg = {\r\n      text: msg,\r\n      roomName: roomName,\r\n      petId: petId,\r\n      userId: user._id,\r\n      userName: user.name,\r\n    }\r\n\r\n    // console.log('NewMsg', newMsg)\r\n\r\n    try {\r\n      setLoading(true)\r\n      const res = await client.post('/chats', newMsg, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.token}`,\r\n        },\r\n      })\r\n      console.log('ResPost', res.data.newChat)\r\n      const chat = res.data.newChat\r\n      chat.user = {\r\n        _id: chat.userId,\r\n        name: chat.userName,\r\n      }\r\n      setLoading(false)\r\n      const allMsg = [...messages, chat].sort(\r\n        (a, b) => new Date(b.createdAt) - new Date(a.createdAt)\r\n      )\r\n      socket.emit('chat', {\r\n        room: roomName,\r\n        msg: allMsg,\r\n      })\r\n    } catch (error) {\r\n      setLoading(false)\r\n      toast.error(\r\n        error.response?.data.msg || 'Something went wrong! Please try again!'\r\n      )\r\n    }\r\n\r\n    reset()\r\n  }\r\n  return (\r\n    <Layout>\r\n      {loading && <LoadingSpinner asOverlay />}\r\n      <div className='chat center'>\r\n        <div className='chat__container'>\r\n          <h2 className='text-center py-10'>Chatting With {senderName}</h2>\r\n          <div className='chat__messages'>\r\n            {messages.length > 0 &&\r\n              messages.map((msg) => (\r\n                <div\r\n                  key={msg._id}\r\n                  className={\r\n                    msg.userId === user._id\r\n                      ? 'chat__messages__local'\r\n                      : 'chat__messages__remote'\r\n                  }\r\n                >\r\n                  <div className=' message'>\r\n                    <p\r\n                      className={\r\n                        msg.userId === user._id ? 'local__msg' : 'remote__msg'\r\n                      }\r\n                    >\r\n                      {msg.text}\r\n                    </p>\r\n                    <p className='msg__date__time'>\r\n                      {new Date(msg.createdAt).toLocaleDateString()}\r\n                    </p>\r\n                    <p className='msg__date__time'>\r\n                      {new Date(msg.createdAt).toLocaleTimeString()}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n          </div>\r\n          <form onSubmit={handleSubmit(handleSendMessage)}>\r\n            <div className='chat__input'>\r\n              <Input\r\n                element='textarea'\r\n                placeholder='Enter your message'\r\n                name='msg'\r\n                rows={2}\r\n                myRef={register({\r\n                  required: 'Please enter your message',\r\n                })}\r\n                // error={errors.msg}\r\n              />\r\n              <Button>\r\n                <FiSend />\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default ChatPage\r\n","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\ResetPasswordPage.js",["194"],"import React, { useEffect, useState, useRef } from 'react'\r\nimport { useForm } from 'react-hook-form'\r\nimport toast from 'react-hot-toast'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\n\r\nimport Button from 'components/shared/Forms/Button'\r\nimport PasswordInput from 'components/shared/Forms/PasswordInput'\r\nimport LoadingSpinner from 'components/shared/UI/LoadingSpinner'\r\n\r\nimport client from 'services/client'\r\n\r\nconst ResetPasswordPage = () => {\r\n  const { handleSubmit, register, errors, watch } = useForm()\r\n  const pass = useRef()\r\n  pass.current = watch('password', '')\r\n  const history = useHistory()\r\n  const params = useParams()\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  const onSubmit = async ({ password }) => {\r\n    try {\r\n      setLoading(true)\r\n      await client.post(`/auth/resetpassword/${params.token}`, { password })\r\n      setLoading(false)\r\n      toast.success('Password Reset Success! Please login')\r\n      setTimeout(() => {\r\n        history.replace('/login')\r\n      }, 2000)\r\n    } catch (error) {\r\n      setLoading(false)\r\n      toast.error(\r\n        error.response?.data.msg || 'Something Went Wrong, Please try again!'\r\n      )\r\n      setTimeout(() => {\r\n        history.replace('/login')\r\n      }, 2000)\r\n    }\r\n  }\r\n  return (\r\n    <div className='center'>\r\n      {loading && <LoadingSpinner asOverlay />}\r\n      <div className='form__wrapper'>\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <h2 className='text-center'>Reset Your Password</h2>\r\n\r\n          <PasswordInput\r\n            label='Password'\r\n            name='password'\r\n            placeholder='********'\r\n            myRef={register({\r\n              required: 'Please enter your password',\r\n              minLength: {\r\n                value: 8,\r\n                message: 'Password must be atleast 8 characters long',\r\n              },\r\n            })}\r\n            error={errors.password}\r\n          />\r\n          <PasswordInput\r\n            label='Repeat Password'\r\n            name='repeatpassword'\r\n            placeholder='********'\r\n            myRef={register({\r\n              validate: (value) =>\r\n                value === pass.current || 'The passwords do not match',\r\n            })}\r\n            error={errors.repeatpassword}\r\n          />\r\n\r\n          <Button classNames='full' type='submit'>\r\n            Reset Password\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ResetPasswordPage\r\n","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\videoCall\\Room.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\Select.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\Input.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\LoginPage.js",["195"],"import React, { useEffect, useState } from 'react'\r\nimport { useForm } from 'react-hook-form'\r\nimport toast from 'react-hot-toast'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { FcGoogle } from 'react-icons/fc'\r\n\r\nimport Button from 'components/shared/Forms/Button'\r\nimport Input from 'components/shared/Forms/Input'\r\nimport PasswordInput from 'components/shared/Forms/PasswordInput'\r\nimport LoadingSpinner from 'components/shared/UI/LoadingSpinner'\r\n\r\nimport { useAuth } from 'context/use-auth'\r\nimport { GoogleLogin } from 'react-google-login'\r\nimport client from 'services/client'\r\nimport Admin from '../doctor/Admin'\r\n\r\nconst LoginPage = () => {\r\n  const { handleSubmit, register, errors } = useForm()\r\n  const {\r\n    loginUser,\r\n    error,\r\n    clearErrors,\r\n    isAuthenticated,\r\n    loadUser,\r\n    loading: cLoading,\r\n    user,\r\n  } = useAuth()\r\n  const history = useHistory()\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (isAuthenticated && user.role === 'doctor') {\r\n      // setAuthToken(localStorage.token)\r\n      history.replace('/')\r\n    } else if (isAuthenticated && user.role === 'admin') {\r\n      // setAuthToken(localStorage.token)\r\n      history.replace('/dashboard')\r\n    }\r\n\r\n    if (error) {\r\n      toast.error(error)\r\n      clearErrors()\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n  }, [error, isAuthenticated])\r\n\r\n  const onSubmit = ({ email, password }) => {\r\n    // console.log('cliekd')\r\n    loginUser({\r\n      emailID: email,\r\n      password,\r\n    })\r\n    clearErrors()\r\n  }\r\n\r\n  const handleGoogleAuth = async (res) => {\r\n    console.log('Ress', res.profileObj)\r\n    try {\r\n      setLoading(true)\r\n      const password = res.profileObj.googleId + Date.now()\r\n      const googleRes = await client.post('/auth/saveGoogle', {\r\n        name: res.profileObj.name,\r\n        emailID: res.profileObj.email,\r\n        password: password,\r\n        role: 'doctor',\r\n      })\r\n      localStorage.setItem('token', googleRes.data.token)\r\n      loadUser()\r\n      setLoading(false)\r\n    } catch (error) {\r\n      console.log('Error', error)\r\n      toast.error('Something Went Wrong! Please try after some time')\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='center'>\r\n      {(loading || cLoading) && <LoadingSpinner asOverlay />}\r\n      <div className='form__wrapper'>\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <h2 className='text-center'>Welcome</h2>\r\n\r\n          <Input\r\n            label='Email'\r\n            name='email'\r\n            type='email'\r\n            placeholder='john@gmail.com'\r\n            myRef={register({\r\n              required: 'Please enter your email',\r\n              pattern: {\r\n                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\r\n                message: 'invalid email address',\r\n              },\r\n            })}\r\n            error={errors.email}\r\n          />\r\n\r\n          <div className='forgot__wrapper'>\r\n            <PasswordInput\r\n              label='Password'\r\n              name='password'\r\n              placeholder='********'\r\n              myRef={register({\r\n                required: 'Please enter your password',\r\n                minLength: {\r\n                  value: 8,\r\n                  message: 'Password must be atleast 8 characters long',\r\n                },\r\n              })}\r\n              error={errors.password}\r\n            />\r\n\r\n            <Link className='forgot' to='/forgotPassword'>\r\n              Forgot Password?\r\n            </Link>\r\n          </div>\r\n\r\n          <Button classNames='full' type='submit'>\r\n            Login\r\n          </Button>\r\n        </form>\r\n\r\n        <hr />\r\n\r\n        <GoogleLogin\r\n          clientId='320113619885-gk7d3v66vs3bf4nksn6mf3tj2s6prgcs.apps.googleusercontent.com'\r\n          buttonText='Login With Google'\r\n          onSuccess={handleGoogleAuth}\r\n          // onFailure={handleGoogleAuth}\r\n          cookiePolicy={'single_host_origin'}\r\n          render={(renderProps) => (\r\n            <button onClick={renderProps.onClick} className='google_btn'>\r\n              <div className='flex-center'>\r\n                <FcGoogle style={{ fontSize: '2.5rem' }} />\r\n                <span className='google__text'>Login With Google</span>\r\n              </div>\r\n            </button>\r\n          )}\r\n        />\r\n      </div>\r\n\r\n      <div className='flex-sbt py-10'>\r\n        <span>Don't have an account?</span>\r\n\r\n        <Link to='/register' className='btn'>\r\n          Register\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LoginPage\r\n","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\admin\\DashBoard.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\videoCall\\Participant.js",["196","197","198","199","200"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\routing\\AdminRoute.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\PatientListPage.js",["201","202"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\CallLogCard.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\admin\\Hospitals.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\reportWebVitals.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\UI\\LoadingSpinner.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\Layout.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\DateTimeInput.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\Header.js",[],{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","replacedBy":"206"},{"ruleId":"207","severity":1,"message":"208","line":31,"column":6,"nodeType":"209","endLine":31,"endColumn":22,"suggestions":"210"},{"ruleId":"207","severity":1,"message":"211","line":31,"column":7,"nodeType":"212","endLine":31,"endColumn":21},{"ruleId":"203","replacedBy":"213"},{"ruleId":"205","replacedBy":"214"},{"ruleId":"207","severity":1,"message":"215","line":94,"column":6,"nodeType":"209","endLine":94,"endColumn":17,"suggestions":"216"},{"ruleId":"207","severity":1,"message":"217","line":100,"column":6,"nodeType":"209","endLine":100,"endColumn":8,"suggestions":"218"},{"ruleId":"203","replacedBy":"219"},{"ruleId":"205","replacedBy":"220"},{"ruleId":"207","severity":1,"message":"221","line":64,"column":6,"nodeType":"209","endLine":64,"endColumn":8,"suggestions":"222"},{"ruleId":"223","severity":1,"message":"224","line":79,"column":13,"nodeType":"225","messageId":"226","endLine":79,"endColumn":19},{"ruleId":"203","replacedBy":"227"},{"ruleId":"205","replacedBy":"228"},{"ruleId":"207","severity":1,"message":"221","line":72,"column":6,"nodeType":"209","endLine":72,"endColumn":8,"suggestions":"229"},{"ruleId":"203","replacedBy":"230"},{"ruleId":"205","replacedBy":"231"},{"ruleId":"223","severity":1,"message":"232","line":12,"column":8,"nodeType":"225","messageId":"226","endLine":12,"endColumn":13},{"ruleId":"207","severity":1,"message":"233","line":106,"column":6,"nodeType":"209","endLine":106,"endColumn":17,"suggestions":"234"},{"ruleId":"235","severity":1,"message":"236","line":165,"column":15,"nodeType":"237","endLine":165,"endColumn":30},{"ruleId":"207","severity":1,"message":"238","line":56,"column":6,"nodeType":"209","endLine":56,"endColumn":8,"suggestions":"239"},{"ruleId":"223","severity":1,"message":"240","line":66,"column":13,"nodeType":"225","messageId":"226","endLine":66,"endColumn":17},{"ruleId":"203","replacedBy":"241"},{"ruleId":"205","replacedBy":"242"},{"ruleId":"203","replacedBy":"243"},{"ruleId":"205","replacedBy":"244"},{"ruleId":"223","severity":1,"message":"245","line":12,"column":10,"nodeType":"225","messageId":"226","endLine":12,"endColumn":16},{"ruleId":"207","severity":1,"message":"246","line":67,"column":6,"nodeType":"209","endLine":67,"endColumn":8,"suggestions":"247"},{"ruleId":"223","severity":1,"message":"248","line":1,"column":17,"nodeType":"225","messageId":"226","endLine":1,"endColumn":26},{"ruleId":"223","severity":1,"message":"232","line":15,"column":8,"nodeType":"225","messageId":"226","endLine":15,"endColumn":13},{"ruleId":"223","severity":1,"message":"249","line":1,"column":8,"nodeType":"225","messageId":"226","endLine":1,"endColumn":14},{"ruleId":"223","severity":1,"message":"250","line":4,"column":10,"nodeType":"225","messageId":"226","endLine":4,"endColumn":15},{"ruleId":"223","severity":1,"message":"251","line":4,"column":17,"nodeType":"225","messageId":"226","endLine":4,"endColumn":25},{"ruleId":"223","severity":1,"message":"252","line":9,"column":10,"nodeType":"225","messageId":"226","endLine":9,"endColumn":19},{"ruleId":"223","severity":1,"message":"253","line":9,"column":21,"nodeType":"225","messageId":"226","endLine":9,"endColumn":33},{"ruleId":"223","severity":1,"message":"254","line":5,"column":27,"nodeType":"225","messageId":"226","endLine":5,"endColumn":34},{"ruleId":"207","severity":1,"message":"221","line":44,"column":6,"nodeType":"209","endLine":44,"endColumn":8,"suggestions":"255"},"no-native-reassign",["256"],"no-negated-in-lhs",["257"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadUser'. Either include it or remove the dependency array.","ArrayExpression",["258"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","BinaryExpression",["256"],["257"],"React Hook useEffect has missing dependencies: 'location.state.item._id' and 'params.id'. Either include them or remove the dependency array.",["259"],"React Hook useCallback has a missing dependency: 'handleDeleteCall'. Either include it or remove the dependency array.",["260"],["256"],["257"],"React Hook useEffect has a missing dependency: 'user._id'. Either include it or remove the dependency array.",["261"],"no-unused-vars","'schRes' is assigned a value but never used.","Identifier","unusedVar",["256"],["257"],["262"],["256"],["257"],"'Admin' is defined but never used.","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["263"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","React Hook useEffect has a missing dependency: 'getUserPendingCalls'. Either include it or remove the dependency array.",["264"],"'pres' is assigned a value but never used.",["256"],["257"],["256"],["257"],"'nanoid' is defined but never used.","React Hook useEffect has missing dependencies: 'petId' and 'roomName'. Either include them or remove the dependency array.",["265"],"'useEffect' is defined but never used.","'Button' is defined but never used.","'FiMic' is defined but never used.","'FiMicOff' is defined but never used.","'muteAudio' is assigned a value but never used.","'setMuteAudio' is assigned a value but never used.","'FiVideo' is defined but never used.",["266"],"no-global-assign","no-unsafe-negation",{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},{"desc":"273","fix":"275"},{"desc":"276","fix":"277"},{"desc":"278","fix":"279"},{"desc":"280","fix":"281"},{"desc":"273","fix":"282"},"Update the dependencies array to be: [loadUser]",{"range":"283","text":"284"},"Update the dependencies array to be: [location.state.item._id, params.id, user.name]",{"range":"285","text":"286"},"Update the dependencies array to be: [handleDeleteCall]",{"range":"287","text":"288"},"Update the dependencies array to be: [user._id]",{"range":"289","text":"290"},{"range":"291","text":"290"},"Update the dependencies array to be: [user, user._id]",{"range":"292","text":"293"},"Update the dependencies array to be: [getUserPendingCalls]",{"range":"294","text":"295"},"Update the dependencies array to be: [petId, roomName]",{"range":"296","text":"297"},{"range":"298","text":"290"},[1164,1180],"[loadUser]",[2849,2860],"[location.state.item._id, params.id, user.name]",[2995,2997],"[handleDeleteCall]",[2056,2058],"[user._id]",[2277,2279],[3109,3120],"[user, user._id]",[1863,1865],"[getUserPendingCalls]",[2137,2139],"[petId, roomName]",[1500,1502]]