[{"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\PatientListPage.js":"1","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\index.js":"2","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\context\\use-auth.js":"3","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\LoginPage.js":"4","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\PrescriptionPage.js":"5","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\DateTimeInput.js":"6","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\Layout.js":"7","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\Button.js":"8","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\UI\\LoadingSpinner.js":"9","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\UI\\Modal.js":"10","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\videoCall\\Participant.js":"11","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\services\\socket.js":"12","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\HomePage.js":"13","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\reportWebVitals.js":"14","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\ForgotPasswordPage.js":"15","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\ChatPage.js":"16","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\services\\client.js":"17","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\CallLogPage.js":"18","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\Select.js":"19","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\CallLogCard.js":"20","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\Header.js":"21","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\RegisterPage.js":"22","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\videoCall\\Room.js":"23","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\UI\\Backdrop.js":"24","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\NotFound.js":"25","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\VideoCallPage.js":"26","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\AddDoctorDetails.js":"27","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\App.js":"28","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\routing\\PrivateRoute.js":"29","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\Input.js":"30","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\NavLinks.js":"31","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\PendingCallPage.js":"32","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\ResetPasswordPage.js":"33","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\PasswordInput.js":"34"},{"size":11134,"mtime":1615267165852,"results":"35","hashOfConfig":"36"},{"size":469,"mtime":1612935527724,"results":"37","hashOfConfig":"36"},{"size":3954,"mtime":1614841801678,"results":"38","hashOfConfig":"36"},{"size":4355,"mtime":1614841813360,"results":"39","hashOfConfig":"36"},{"size":4394,"mtime":1613131068038,"results":"40","hashOfConfig":"36"},{"size":465,"mtime":1613475664031,"results":"41","hashOfConfig":"36"},{"size":235,"mtime":1613037914716,"results":"42","hashOfConfig":"36"},{"size":322,"mtime":1612933214649,"results":"43","hashOfConfig":"36"},{"size":272,"mtime":1612932227806,"results":"44","hashOfConfig":"36"},{"size":637,"mtime":1613027629282,"results":"45","hashOfConfig":"36"},{"size":2923,"mtime":1613194297479,"results":"46","hashOfConfig":"36"},{"size":248,"mtime":1615874807283,"results":"47","hashOfConfig":"36"},{"size":5595,"mtime":1615893439510,"results":"48","hashOfConfig":"36"},{"size":362,"mtime":1606886196678,"results":"49","hashOfConfig":"36"},{"size":1950,"mtime":1613560487490,"results":"50","hashOfConfig":"36"},{"size":5130,"mtime":1614683329388,"results":"51","hashOfConfig":"36"},{"size":202,"mtime":1615895863345,"results":"52","hashOfConfig":"36"},{"size":5078,"mtime":1615875342380,"results":"53","hashOfConfig":"36"},{"size":688,"mtime":1612953030861,"results":"54","hashOfConfig":"36"},{"size":1301,"mtime":1613472225545,"results":"55","hashOfConfig":"36"},{"size":354,"mtime":1615267948014,"results":"56","hashOfConfig":"36"},{"size":4475,"mtime":1614862569061,"results":"57","hashOfConfig":"36"},{"size":2067,"mtime":1613131046059,"results":"58","hashOfConfig":"36"},{"size":278,"mtime":1613027244048,"results":"59","hashOfConfig":"36"},{"size":439,"mtime":1612951058953,"results":"60","hashOfConfig":"36"},{"size":1623,"mtime":1613128972583,"results":"61","hashOfConfig":"36"},{"size":10688,"mtime":1614862569060,"results":"62","hashOfConfig":"36"},{"size":1791,"mtime":1613559586588,"results":"63","hashOfConfig":"36"},{"size":443,"mtime":1612936776068,"results":"64","hashOfConfig":"36"},{"size":969,"mtime":1612933219433,"results":"65","hashOfConfig":"36"},{"size":869,"mtime":1615267935762,"results":"66","hashOfConfig":"36"},{"size":17460,"mtime":1615889626020,"results":"67","hashOfConfig":"36"},{"size":2475,"mtime":1613560798652,"results":"68","hashOfConfig":"36"},{"size":1246,"mtime":1613104033191,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"73"},"1iylv84",{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"73"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"73"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"73"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"73"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"73"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"73"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\PatientListPage.js",["148"],"import React, { useState, useEffect } from 'react'\r\nimport Layout from 'components/layouts/Layout'\r\nimport client from 'services/client'\r\nimport toast from 'react-hot-toast'\r\nimport { FiMessageCircle, FiVideo } from 'react-icons/fi'\r\n\r\nimport './PatientListPage.css'\r\n\r\nimport { useAuth } from 'context/use-auth'\r\nimport LoadingSpinner from 'components/shared/UI/LoadingSpinner'\r\nimport { FiChevronRight } from 'react-icons/fi'\r\nimport Backdrop from 'components/shared/UI/Backdrop'\r\nimport Modal from 'components/shared/UI/Modal'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst PatientListPage = () => {\r\n  const { user } = useAuth()\r\n  const [patients, setPatients] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n  const [open, setOpen] = useState(false)\r\n  const [currentPatient, setCurrentPatient] = useState()\r\n  const [pet, setPet] = useState(null)\r\n  const [petLoading, setPetLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const getPatients = async () => {\r\n      setLoading(true)\r\n      try {\r\n        const res = await client.get(`/rooms/receiver/${user._id}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        })\r\n        // console.log('Res', res)\r\n        setPatients(res.data.room)\r\n        setLoading(false)\r\n      } catch (error) {\r\n        // console.log(error)\r\n        toast.error('Something Went Wrong! Please try again later!')\r\n        setLoading(false)\r\n      }\r\n    }\r\n    getPatients()\r\n  }, [])\r\n\r\n  const toggleModal = () => {\r\n    setOpen(!open)\r\n  }\r\n\r\n  const handlePatModal = async (pat) => {\r\n    setCurrentPatient(pat)\r\n    toggleModal()\r\n    try {\r\n      setPetLoading(true)\r\n      const petRes = await client.get(`/pets/${pat.petId}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.token}`,\r\n        },\r\n      })\r\n      console.log('PET', petRes)\r\n      setPet(petRes.data.exPet)\r\n      setPetLoading(false)\r\n    } catch (error) {\r\n      toast.error('Something Went Wrong! Please try again later!')\r\n      setPetLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      {loading && <LoadingSpinner asOverlay />}\r\n      {open && <Backdrop toggle={toggleModal} />}\r\n      {open && (\r\n        <Modal\r\n          toggle={toggleModal}\r\n          title={`${currentPatient.senderName}'s Pet Details`}\r\n        >\r\n          <div className='chat-video_wrapper flex-center'>\r\n            <Link\r\n              to={`/video-call/${currentPatient.name}`}\r\n              className='btn flex-center'\r\n            >\r\n              <FiVideo className='icon' />\r\n              Video Call\r\n            </Link>\r\n            <Link\r\n              to={{\r\n                pathname: `/chat/${currentPatient.name}`,\r\n                state: { data: currentPatient },\r\n              }}\r\n              className='btn flex-center'\r\n            >\r\n              <FiMessageCircle className='icon' />\r\n              Chat\r\n            </Link>\r\n          </div>\r\n          {petLoading && <LoadingSpinner asOverlay />}\r\n          {pet && (\r\n            <div className='pet__details'>\r\n              <h5>\r\n                Date: <span>{new Date(pet.createdAt).toLocaleString()}</span>\r\n              </h5>\r\n              <h5>\r\n                Weight: <span>{pet.weight} Kg</span>\r\n              </h5>\r\n\r\n              <h5>\r\n                Gender: <span>{pet.gender}</span>\r\n              </h5>\r\n              <h5>\r\n                Species: <span>{pet.type}</span>\r\n              </h5>\r\n              <h5>\r\n                Breed: <span>{pet.breed}</span>\r\n              </h5>\r\n\r\n              <h5>\r\n                Age:\r\n                <span>\r\n                  {pet.years !== 0 && `${pet.years} Years`}{' '}\r\n                  {pet.months !== 0 && `${pet.months} Months`}\r\n                </span>\r\n              </h5>\r\n\r\n              {pet?.petHistoryImages?.length > 0 && (\r\n                <>\r\n                  <h5>Pet History Images: </h5>\r\n                  <div className='pet__history__images'>\r\n                    {pet.petHistoryImages.map((img, i) => (\r\n                      <div key={`${img}-${i}`} className='pet__history__img'>\r\n                        {/* <img\r\n                          src={`http://192.168.43.242:8000/img/${img}`}\r\n                          width='200'\r\n                          height='200'\r\n                          alt={`${pet.type}`}\r\n                        /> */}\r\n                        <img\r\n                          src={`${img}`}\r\n                          width='200'\r\n                          height='200'\r\n                          style={{ objectFit: 'cover' }}\r\n                          alt={`${pet.type}`}\r\n                        />\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </>\r\n              )}\r\n\r\n              {pet?.prescriptions?.length > 0 && <h5>Pet Prescriptions:</h5>}\r\n              {pet?.prescriptions?.length > 0 &&\r\n                pet.prescriptions.map((pr, i) => (\r\n                  <div className='py-10' key={pr._id}>\r\n                    <h5>\r\n                      {i + 1}. Prescription: <span>{pr.prescription}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Doctor's Name: <span>{pr.docname}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Date: <span>{new Date(pr.date).toLocaleString()}</span>\r\n                    </h5>\r\n                    {pr.img && (\r\n                      <>\r\n                        <h5>Prescription image</h5>\r\n                        <div className='pet__history__img'>\r\n                          {/* <img\r\n                            src={`http://192.168.43.242:8000/${pr.img}`}\r\n                            width='200'\r\n                            height='200'\r\n                            style={{ maxHeight: '200px', maxWidth: '200px' }}\r\n                            alt={`${pet.type}`}\r\n                          /> */}\r\n                          <img\r\n                            src={`${pr.img}`}\r\n                            width='200'\r\n                            height='200'\r\n                            style={{\r\n                              maxHeight: '200px',\r\n                              maxWidth: '200px',\r\n                              objectFit: 'cover',\r\n                            }}\r\n                            alt={`${pet.type}`}\r\n                          />\r\n                        </div>\r\n                      </>\r\n                    )}\r\n                    <hr />\r\n                  </div>\r\n                ))}\r\n\r\n              {pet?.problems?.length > 0 && <h5>Pet Problems: </h5>}\r\n              {pet?.problems?.length > 0 &&\r\n                pet.problems.map((pb, i) => (\r\n                  <div className='pet__problems py-10' key={pb._id}>\r\n                    <h5>\r\n                      {i + 1}. Problem: <span>{pb.problem}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Doctor's Name: <span>{pb.docname}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Time Period: <span>{pb.time}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Appetite: <span>{pb.Appetite}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Behaviour: <span>{pb.Behaviour}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Eyes: <span>{pb.Eyes}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Comment: <span>{pb.comment}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Gait: <span>{pb.Gait}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Mucous: <span>{pb.Mucous}</span>\r\n                    </h5>\r\n\r\n                    {pb.Ears?.length > 0 && <h5>Ears: </h5>}\r\n\r\n                    {pb.Ears?.length > 0 &&\r\n                      pb.Ears.map((er, i) => <h3 key={`${i}-Ears`}> {er}</h3>)}\r\n\r\n                    {pb.Feces?.length > 0 && <h5>Faces: </h5>}\r\n\r\n                    {pb.Feces?.length > 0 &&\r\n                      pb.Feces.map((fc, i) => (\r\n                        <h3 key={`Feces ${i}`}> {fc}</h3>\r\n                      ))}\r\n                    {pb.Urine?.length > 0 && <h5>Urines: </h5>}\r\n\r\n                    {pb.Urine?.length > 0 &&\r\n                      pb.Urine.map((ur, i) => (\r\n                        <h3 key={`Urines ${i}`}> {ur}</h3>\r\n                      ))}\r\n                    {pb.Skin?.length > 0 && <h5>Skins: </h5>}\r\n\r\n                    {pb.Skin?.length > 0 &&\r\n                      pb.Skin.map((sk, i) => <h3 key={`Skins ${i}`}> {sk}</h3>)}\r\n\r\n                    {pb?.images?.length && <h5>Pet Problem image</h5>}\r\n                    <div className='pet__history__images'>\r\n                      {pb?.images?.length > 0 &&\r\n                        pb.images.map((img, i) => (\r\n                          <div\r\n                            key={`${img}-${i}`}\r\n                            className='pet__history__img'\r\n                          >\r\n                            {/* <img\r\n                              src={`http://192.168.43.242:8000/${img}`}\r\n                              width='200'\r\n                              height='200'\r\n                              style={{ maxHeight: '200px', maxWidth: '200px' }}\r\n                              alt={`${pet.type}`}\r\n                            /> */}\r\n                            <img\r\n                              src={`${img}`}\r\n                              width='200'\r\n                              height='200'\r\n                              style={{\r\n                                maxHeight: '200px',\r\n                                maxWidth: '200px',\r\n                                objectFit: 'cover',\r\n                              }}\r\n                              alt={`${pet.type}`}\r\n                            />\r\n                          </div>\r\n                        ))}\r\n                    </div>\r\n                    <hr />\r\n                  </div>\r\n                ))}\r\n            </div>\r\n          )}\r\n        </Modal>\r\n      )}\r\n      {patients.length === 0 && (\r\n        <h3 className='text-center'>\r\n          No Patients Have Contacted You, Please Comeback After Some Time!\r\n        </h3>\r\n      )}\r\n\r\n      {patients.length > 0 && <h3 className='text-center'>Patients List:</h3>}\r\n      {patients.length > 0 && (\r\n        <div className='pat__grid center'>\r\n          {patients.map((pat) => (\r\n            <div\r\n              key={pat._id}\r\n              className='patient__list'\r\n              onClick={() => handlePatModal(pat)}\r\n            >\r\n              <div className='patient__list__item'>\r\n                <p className='patient__list__item__img'>{pat.senderName[0]}</p>\r\n                <p className='patient__list__item__name'>{pat.senderName}</p>\r\n              </div>\r\n              <FiChevronRight style={{ fontSize: '2.5rem' }} />\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default PatientListPage\r\n",["149","150"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\index.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\context\\use-auth.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\LoginPage.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\PrescriptionPage.js",["151"],"import React, { useEffect, useState } from 'react'\r\nimport * as Yup from 'yup'\r\nimport { useForm } from 'react-hook-form'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport { useAuth } from 'context/use-auth'\r\nimport toast from 'react-hot-toast'\r\nimport Layout from 'components/layouts/Layout'\r\n\r\nimport './PrescriptionPage.css'\r\nimport LoadingSpinner from 'components/shared/UI/LoadingSpinner'\r\nimport Select from 'components/shared/Forms/Select'\r\nimport Input from 'components/shared/Forms/Input'\r\nimport Button from 'components/shared/Forms/Button'\r\nimport client from 'services/client'\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  patientName: Yup.string()\r\n    .required('Please select a patient')\r\n    .label('Patient Name'),\r\n  prescription: Yup.string().max(300).required().label('Prescription'),\r\n  photo: Yup.mixed()\r\n    .test(\r\n      'imageSize',\r\n      'Please select a .jpeg/.jpg image of size less than 1 Mb',\r\n      (value) => {\r\n        if (value && value[0].type !== 'image/jpeg') {\r\n          return false\r\n        }\r\n        return value && value[0].size <= 1000000\r\n      }\r\n    )\r\n    .label('Image'),\r\n})\r\n\r\nconst PrescriptionPage = () => {\r\n  const { handleSubmit, register, errors } = useForm({\r\n    resolver: yupResolver(validationSchema),\r\n  })\r\n\r\n  const { user } = useAuth()\r\n  const [patients, setPatients] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const getPatients = async () => {\r\n      setLoading(true)\r\n      try {\r\n        const res = await client.get(`/rooms/receiver/${user._id}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        })\r\n        let pateintss = res.data.room\r\n        let newPatients = pateintss.reduce((acc, item) => {\r\n          acc.push({\r\n            label:\r\n              item.senderName.charAt(0).toUpperCase() +\r\n              item.senderName.slice(1),\r\n            value: item.petId,\r\n          })\r\n          return acc\r\n        }, [])\r\n        setPatients(newPatients)\r\n        setLoading(false)\r\n      } catch (error) {\r\n        // console.log(error)\r\n        toast.error('Something Went Wrong! Please try again later!')\r\n        setLoading(false)\r\n      }\r\n    }\r\n    getPatients()\r\n  }, [])\r\n\r\n  const onSubmit = async (data) => {\r\n    const formData = new FormData()\r\n    if (data.photo[0]) {\r\n      formData.append('photo', data.photo[0])\r\n    }\r\n    formData.append('prescription', data.prescription)\r\n    formData.append('docname', user.name)\r\n    for (var key of formData.entries()) {\r\n      console.log(key[0] + ', ' + key[1])\r\n    }\r\n\r\n    try {\r\n      setLoading(true)\r\n      const petRes = await client.patch(\r\n        `/pets/prescription/${data.patientName}`,\r\n        formData,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        }\r\n      )\r\n      console.log('PetRes', petRes)\r\n      toast.success('Prescription Send Successfully!')\r\n      setLoading(false)\r\n    } catch (error) {\r\n      console.log('Error', error)\r\n      toast.error('Something Went Wrong! Please try again later!')\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <div className='center'>\r\n        {loading && <LoadingSpinner asOverlay />}\r\n        <div className='prescription'>\r\n          <h3 className='text-center'> Please Provide Your Prescription </h3>\r\n          <form onSubmit={handleSubmit(onSubmit)}>\r\n            <Select\r\n              label='Select Patient Name'\r\n              data={patients}\r\n              name='patientName'\r\n              myRef={register}\r\n              error={errors.patientName}\r\n            />\r\n            <Input\r\n              label='Prescription'\r\n              placeholder='Enter your prescription'\r\n              element='textarea'\r\n              rows={5}\r\n              name='prescription'\r\n              myRef={register}\r\n              error={errors.prescription}\r\n            />\r\n            <Input\r\n              type='file'\r\n              label='Select image'\r\n              name='photo'\r\n              myRef={register}\r\n              error={errors.photo}\r\n            />\r\n            <Button classNames='full' type='submit'>\r\n              Send Prescription\r\n            </Button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default PrescriptionPage\r\n","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\DateTimeInput.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\Layout.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\Button.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\UI\\LoadingSpinner.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\UI\\Modal.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\videoCall\\Participant.js",["152","153","154","155","156"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\services\\socket.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\HomePage.js",["157","158","159"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\reportWebVitals.js",[],["160","161"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\ForgotPasswordPage.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\ChatPage.js",["162","163"],"import React, { useState, useEffect } from 'react'\r\nimport Layout from 'components/layouts/Layout'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { useForm } from 'react-hook-form'\r\n\r\nimport Input from 'components/shared/Forms/Input'\r\nimport Button from 'components/shared/Forms/Button'\r\nimport LoadingSpinner from 'components/shared/UI/LoadingSpinner'\r\nimport { FiSend } from 'react-icons/fi'\r\nimport { useAuth } from 'context/use-auth'\r\nimport socket from 'services/socket'\r\nimport { nanoid } from 'nanoid'\r\n\r\nimport './ChatPage.css'\r\nimport client from 'services/client'\r\nimport toast from 'react-hot-toast'\r\n\r\nconst ChatPage = () => {\r\n  const { user } = useAuth()\r\n  const { handleSubmit, register, reset } = useForm()\r\n  const [messages, setMessages] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n  const loc = useLocation()\r\n  const { name: roomName, petId, senderName } = loc.state?.data\r\n\r\n  useEffect(() => {\r\n    const getAllChats = async () => {\r\n      setLoading(true)\r\n      try {\r\n        const chatRes = await client.get(`/chats/room/${roomName}/${petId}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        })\r\n        // console.log('Res', chatRes)\r\n        // const sortedChat = chatRes.data.chats.sort(\r\n        //   (a, b) => new Date(a.createdAt) - new Date(b.createdAt)\r\n        // )\r\n        const newMessages = chatRes.data.chats.map((msg) => {\r\n          return {\r\n            ...msg,\r\n            user: {\r\n              _id: msg.userId,\r\n              name: msg.userName,\r\n            },\r\n          }\r\n        })\r\n        setMessages(newMessages)\r\n        setLoading(false)\r\n\r\n        socket.emit('room', roomName)\r\n        socket.on('chat', (data) => {\r\n          // console.log('Data', sortedData)\r\n          setMessages(data)\r\n        })\r\n      } catch (error) {\r\n        console.log('Error', error)\r\n        setLoading(false)\r\n        toast.error(\r\n          error.response?.data?.msg || 'Something went wrong! Please try again!'\r\n        )\r\n      }\r\n    }\r\n\r\n    getAllChats()\r\n    // console.log('Socket', socket)\r\n  }, [])\r\n\r\n  const handleSendMessage = async ({ msg }) => {\r\n    // console.log('Mssd', msg)\r\n    const newMsg = {\r\n      text: msg,\r\n      roomName: roomName,\r\n      petId: petId,\r\n      userId: user._id,\r\n      userName: user.name,\r\n    }\r\n\r\n    // console.log('NewMsg', newMsg)\r\n\r\n    try {\r\n      setLoading(true)\r\n      const res = await client.post('/chats', newMsg, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.token}`,\r\n        },\r\n      })\r\n      console.log('ResPost', res.data.newChat)\r\n      const chat = res.data.newChat\r\n      chat.user = {\r\n        _id: chat.userId,\r\n        name: chat.userName,\r\n      }\r\n      setLoading(false)\r\n      const allMsg = [...messages, chat].sort(\r\n        (a, b) => new Date(b.createdAt) - new Date(a.createdAt)\r\n      )\r\n      socket.emit('chat', {\r\n        room: roomName,\r\n        msg: allMsg,\r\n      })\r\n    } catch (error) {\r\n      setLoading(false)\r\n      toast.error(\r\n        error.response?.data.msg || 'Something went wrong! Please try again!'\r\n      )\r\n    }\r\n\r\n    reset()\r\n  }\r\n  return (\r\n    <Layout>\r\n      {loading && <LoadingSpinner asOverlay />}\r\n      <div className='chat center'>\r\n        <div className='chat__container'>\r\n          <h2 className='text-center py-10'>Chatting With {senderName}</h2>\r\n          <div className='chat__messages'>\r\n            {messages.length > 0 &&\r\n              messages.map((msg) => (\r\n                <div\r\n                  key={msg._id}\r\n                  className={\r\n                    msg.userId === user._id\r\n                      ? 'chat__messages__local'\r\n                      : 'chat__messages__remote'\r\n                  }\r\n                >\r\n                  <div className=' message'>\r\n                    <p\r\n                      className={\r\n                        msg.userId === user._id ? 'local__msg' : 'remote__msg'\r\n                      }\r\n                    >\r\n                      {msg.text}\r\n                    </p>\r\n                    <p className='msg__date__time'>\r\n                      {new Date(msg.createdAt).toLocaleDateString()}\r\n                    </p>\r\n                    <p className='msg__date__time'>\r\n                      {new Date(msg.createdAt).toLocaleTimeString()}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n          </div>\r\n          <form onSubmit={handleSubmit(handleSendMessage)}>\r\n            <div className='chat__input'>\r\n              <Input\r\n                element='textarea'\r\n                placeholder='Enter your message'\r\n                name='msg'\r\n                rows={2}\r\n                myRef={register({\r\n                  required: 'Please enter your message',\r\n                })}\r\n                // error={errors.msg}\r\n              />\r\n              <Button>\r\n                <FiSend />\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default ChatPage\r\n","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\services\\client.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\CallLogPage.js",["164","165"],"import React, { useState, useEffect } from 'react'\r\nimport Layout from 'components/layouts/Layout'\r\n\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport './CallLogPage.css'\r\nimport client from 'services/client'\r\nimport { useAuth } from 'context/use-auth'\r\nimport LoadingSpinner from 'components/shared/UI/LoadingSpinner'\r\nimport CallLogCard from 'components/layouts/CallLogCard'\r\nimport toast from 'react-hot-toast'\r\n\r\nimport Backdrop from 'components/shared/UI/Backdrop'\r\nimport Modal from 'components/shared/UI/Modal'\r\n\r\nimport DatePicker from 'react-datepicker'\r\nimport DateTimeInput from 'components/layouts/DateTimeInput'\r\nimport Button from 'components/shared/Forms/Button'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst CallLogPage = () => {\r\n  const { user } = useAuth()\r\n  const [missedCall, setMissedCall] = useState([])\r\n  const [completedCall, setCompletedCall] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n  const [open, setOpen] = useState(false)\r\n  const [currentCall, setCurrentCall] = useState()\r\n  const [startDate, setStartDate] = useState(new Date())\r\n  const [startTime, setStartTime] = useState(new Date())\r\n\r\n  useEffect(() => {\r\n    const getMissedCall = async () => {\r\n      setLoading(true)\r\n      try {\r\n        const res = await client.get(`/calllogs?receiverId=${user._id}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        })\r\n\r\n        const callLogsArray = res.data.callLogs\r\n        const msCall = []\r\n        const cmCall = []\r\n        callLogsArray.forEach((log) => {\r\n          if (log.callPending) {\r\n            msCall.push(log)\r\n          } else {\r\n            cmCall.push(log)\r\n          }\r\n        })\r\n\r\n        setMissedCall(msCall)\r\n        setCompletedCall(cmCall)\r\n        setLoading(false)\r\n      } catch (error) {\r\n        setLoading(false)\r\n        toast.error(\r\n          error.response.data?.msg ||\r\n            'Something Went Wrong! Please try again later!'\r\n        )\r\n      }\r\n    }\r\n\r\n    getMissedCall()\r\n  }, [])\r\n\r\n  const toggleModal = () => {\r\n    setOpen(!open)\r\n  }\r\n\r\n  const handleScheduleCall = (call) => {\r\n    toggleModal()\r\n    setCurrentCall(call)\r\n  }\r\n\r\n  const handleScheduleBtn = async () => {\r\n    startDate.setTime(startTime.getTime())\r\n    setLoading(true)\r\n    try {\r\n      const schRes = await client.post(\r\n        '/scheduledCalls',\r\n        {\r\n          date: startDate,\r\n          userId: currentCall.senderId._id,\r\n          doctorId: currentCall.receiverId._id,\r\n          doctorName: currentCall.receiverId.name,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        }\r\n      )\r\n\r\n      setLoading(false)\r\n      toast.success('Your Call has been schedule')\r\n      window.location.href = '/'\r\n    } catch (error) {\r\n      setLoading(false)\r\n      toast.error(\r\n        error.response.data?.msg ||\r\n          'Something Went Wrong! Please try again later!'\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      {loading && <LoadingSpinner asOverlay />}\r\n      {open && <Backdrop toggle={toggleModal} />}\r\n      {open && (\r\n        <Modal toggle={toggleModal} title='Schedule Call'>\r\n          <div className='sch__modal'>\r\n            <h4>Select Time</h4>\r\n            <DatePicker\r\n              selected={startTime}\r\n              onChange={(date) => setStartTime(date)}\r\n              showTimeSelect\r\n              showTimeSelectOnly\r\n              timeIntervals={15}\r\n              timeCaption='Time'\r\n              dateFormat='h:mm aa'\r\n              customInput={<DateTimeInput time={true} />}\r\n            />\r\n\r\n            <h4>Choose Date</h4>\r\n            <DatePicker\r\n              selected={startDate}\r\n              onChange={(date) => setStartDate(date)}\r\n              minDate={new Date()}\r\n              customInput={<DateTimeInput />}\r\n            />\r\n          </div>\r\n          <Button onClick={handleScheduleBtn} classNames='btn__sch'>\r\n            Schedule\r\n          </Button>\r\n        </Modal>\r\n      )}\r\n      <div className='flex-center'>\r\n        <Link to='/call-log/pending' className='btn'>\r\n          See Pending Calls\r\n        </Link>\r\n      </div>\r\n      <div className='call-log__container'>\r\n        <div className='missed__call call__common'>\r\n          <h2 className='text-center'>Missed Calls</h2>\r\n          {missedCall.length > 0 ? (\r\n            <CallLogCard\r\n              callLogs={missedCall}\r\n              isSchedule={true}\r\n              onSchedule={handleScheduleCall}\r\n            />\r\n          ) : (\r\n            <h4 className='text-center'>No Missed Calls</h4>\r\n          )}\r\n        </div>\r\n        <div className='completed__call call__common'>\r\n          <h2 className='text-center'>Completed Calls</h2>\r\n          {completedCall.length > 0 ? (\r\n            <CallLogCard callLogs={completedCall} />\r\n          ) : (\r\n            <h4 className='text-center'>No Completed Calls</h4>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default CallLogPage\r\n","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\Select.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\CallLogCard.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\Header.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\RegisterPage.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\videoCall\\Room.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\UI\\Backdrop.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\NotFound.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\VideoCallPage.js",["166"],"import React, { useState, useEffect, useCallback } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useAuth } from 'context/use-auth'\r\nimport toast from 'react-hot-toast'\r\n\r\nimport LoadingSpinner from 'components/shared/UI/LoadingSpinner'\r\nimport client from 'services/client'\r\nimport Layout from 'components/layouts/Layout'\r\nimport Room from 'components/videoCall/Room'\r\n\r\nimport './VideoCallPage.css'\r\n\r\nconst VideoCallPage = () => {\r\n  const params = useParams()\r\n  const { user } = useAuth()\r\n  const [token, setToken] = useState(null)\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const getVideoToken = async () => {\r\n      try {\r\n        setLoading(true)\r\n        const tokenRes = await client.post(\r\n          `/users/getToken`,\r\n          {\r\n            userName: user.name,\r\n            roomName: params.id,\r\n          },\r\n          {\r\n            headers: { Authorization: `Bearer ${localStorage.token}` },\r\n          }\r\n        )\r\n        setToken(tokenRes.data)\r\n        setLoading(false)\r\n      } catch (error) {\r\n        console.log('Error', error)\r\n        toast.error('Something went wrong! Please try again later!')\r\n        setLoading(false)\r\n      }\r\n    }\r\n    getVideoToken()\r\n  }, [user.name])\r\n\r\n  const handleLogout = useCallback((event) => {\r\n    setToken(null)\r\n    window.location.href = '/'\r\n  }, [])\r\n\r\n  return (\r\n    <Layout>\r\n      {loading && <LoadingSpinner asOverlay />}\r\n      {token && (\r\n        <Room roomName={params.id} token={token} handleLogout={handleLogout} />\r\n      )}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default VideoCallPage\r\n","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\AddDoctorDetails.js",[],["167","168"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\App.js",["169"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\routing\\PrivateRoute.js",["170"],"import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport { useAuth } from 'context/use-auth'\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => {\r\n  const { isAuthenticated, loading } = useAuth()\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        !isAuthenticated ? <Redirect to='/login' /> : <Component {...props} />\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nexport default PrivateRoute\r\n","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\Input.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\layouts\\NavLinks.js",[],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\doctor\\PendingCallPage.js",["171","172"],"C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\pages\\auth\\ResetPasswordPage.js",["173"],"import React, { useEffect, useState, useRef } from 'react'\r\nimport { useForm } from 'react-hook-form'\r\nimport toast from 'react-hot-toast'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\n\r\nimport Button from 'components/shared/Forms/Button'\r\nimport PasswordInput from 'components/shared/Forms/PasswordInput'\r\nimport LoadingSpinner from 'components/shared/UI/LoadingSpinner'\r\n\r\nimport client from 'services/client'\r\n\r\nconst ResetPasswordPage = () => {\r\n  const { handleSubmit, register, errors, watch } = useForm()\r\n  const pass = useRef()\r\n  pass.current = watch('password', '')\r\n  const history = useHistory()\r\n  const params = useParams()\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  const onSubmit = async ({ password }) => {\r\n    try {\r\n      setLoading(true)\r\n      await client.post(`/auth/resetpassword/${params.token}`, { password })\r\n      setLoading(false)\r\n      toast.success('Password Reset Success! Please login')\r\n      setTimeout(() => {\r\n        history.replace('/login')\r\n      }, 2000)\r\n    } catch (error) {\r\n      setLoading(false)\r\n      toast.error(\r\n        error.response?.data.msg || 'Something Went Wrong, Please try again!'\r\n      )\r\n      setTimeout(() => {\r\n        history.replace('/login')\r\n      }, 2000)\r\n    }\r\n  }\r\n  return (\r\n    <div className='center'>\r\n      {loading && <LoadingSpinner asOverlay />}\r\n      <div className='form__wrapper'>\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <h2 className='text-center'>Reset Your Password</h2>\r\n\r\n          <PasswordInput\r\n            label='Password'\r\n            name='password'\r\n            placeholder='********'\r\n            myRef={register({\r\n              required: 'Please enter your password',\r\n              minLength: {\r\n                value: 8,\r\n                message: 'Password must be atleast 8 characters long',\r\n              },\r\n            })}\r\n            error={errors.password}\r\n          />\r\n          <PasswordInput\r\n            label='Repeat Password'\r\n            name='repeatpassword'\r\n            placeholder='********'\r\n            myRef={register({\r\n              validate: (value) =>\r\n                value === pass.current || 'The passwords do not match',\r\n            })}\r\n            error={errors.repeatpassword}\r\n          />\r\n\r\n          <Button classNames='full' type='submit'>\r\n            Reset Password\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ResetPasswordPage\r\n","C:\\Users\\Avinash\\Desktop\\ReactNative\\Web\\vetinstantweb\\src\\components\\shared\\Forms\\PasswordInput.js",[],{"ruleId":"174","severity":1,"message":"175","line":44,"column":6,"nodeType":"176","endLine":44,"endColumn":8,"suggestions":"177"},{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","replacedBy":"181"},{"ruleId":"174","severity":1,"message":"175","line":72,"column":6,"nodeType":"176","endLine":72,"endColumn":8,"suggestions":"182"},{"ruleId":"183","severity":1,"message":"184","line":1,"column":8,"nodeType":"185","messageId":"186","endLine":1,"endColumn":14},{"ruleId":"183","severity":1,"message":"187","line":4,"column":10,"nodeType":"185","messageId":"186","endLine":4,"endColumn":15},{"ruleId":"183","severity":1,"message":"188","line":4,"column":17,"nodeType":"185","messageId":"186","endLine":4,"endColumn":25},{"ruleId":"183","severity":1,"message":"189","line":9,"column":10,"nodeType":"185","messageId":"186","endLine":9,"endColumn":19},{"ruleId":"183","severity":1,"message":"190","line":9,"column":21,"nodeType":"185","messageId":"186","endLine":9,"endColumn":33},{"ruleId":"174","severity":1,"message":"191","line":19,"column":6,"nodeType":"176","endLine":19,"endColumn":8,"suggestions":"192"},{"ruleId":"174","severity":1,"message":"193","line":108,"column":6,"nodeType":"176","endLine":108,"endColumn":17,"suggestions":"194"},{"ruleId":"195","severity":1,"message":"196","line":167,"column":15,"nodeType":"197","endLine":167,"endColumn":30},{"ruleId":"178","replacedBy":"198"},{"ruleId":"180","replacedBy":"199"},{"ruleId":"183","severity":1,"message":"200","line":12,"column":10,"nodeType":"185","messageId":"186","endLine":12,"endColumn":16},{"ruleId":"174","severity":1,"message":"201","line":67,"column":6,"nodeType":"176","endLine":67,"endColumn":8,"suggestions":"202"},{"ruleId":"174","severity":1,"message":"175","line":64,"column":6,"nodeType":"176","endLine":64,"endColumn":8,"suggestions":"203"},{"ruleId":"183","severity":1,"message":"204","line":79,"column":13,"nodeType":"185","messageId":"186","endLine":79,"endColumn":19},{"ruleId":"174","severity":1,"message":"205","line":42,"column":6,"nodeType":"176","endLine":42,"endColumn":17,"suggestions":"206"},{"ruleId":"178","replacedBy":"207"},{"ruleId":"180","replacedBy":"208"},{"ruleId":"174","severity":1,"message":"191","line":26,"column":6,"nodeType":"176","endLine":26,"endColumn":8,"suggestions":"209"},{"ruleId":"183","severity":1,"message":"210","line":6,"column":28,"nodeType":"185","messageId":"186","endLine":6,"endColumn":35},{"ruleId":"174","severity":1,"message":"211","line":56,"column":6,"nodeType":"176","endLine":56,"endColumn":8,"suggestions":"212"},{"ruleId":"183","severity":1,"message":"213","line":66,"column":13,"nodeType":"185","messageId":"186","endLine":66,"endColumn":17},{"ruleId":"183","severity":1,"message":"214","line":1,"column":17,"nodeType":"185","messageId":"186","endLine":1,"endColumn":26},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user._id'. Either include it or remove the dependency array.","ArrayExpression",["215"],"no-native-reassign",["216"],"no-negated-in-lhs",["217"],["218"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'FiMic' is defined but never used.","'FiMicOff' is defined but never used.","'muteAudio' is assigned a value but never used.","'setMuteAudio' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadUser'. Either include it or remove the dependency array.",["219"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["220"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute",["216"],["217"],"'nanoid' is defined but never used.","React Hook useEffect has missing dependencies: 'petId' and 'roomName'. Either include them or remove the dependency array.",["221"],["222"],"'schRes' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'params.id'. Either include it or remove the dependency array.",["223"],["216"],["217"],["224"],"'loading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getUserPendingCalls'. Either include it or remove the dependency array.",["225"],"'pres' is assigned a value but never used.","'useEffect' is defined but never used.",{"desc":"226","fix":"227"},"no-global-assign","no-unsafe-negation",{"desc":"226","fix":"228"},{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},{"desc":"233","fix":"234"},{"desc":"226","fix":"235"},{"desc":"236","fix":"237"},{"desc":"229","fix":"238"},{"desc":"239","fix":"240"},"Update the dependencies array to be: [user._id]",{"range":"241","text":"242"},{"range":"243","text":"242"},"Update the dependencies array to be: [loadUser]",{"range":"244","text":"245"},"Update the dependencies array to be: [user, user._id]",{"range":"246","text":"247"},"Update the dependencies array to be: [petId, roomName]",{"range":"248","text":"249"},{"range":"250","text":"242"},"Update the dependencies array to be: [params.id, user.name]",{"range":"251","text":"252"},{"range":"253","text":"245"},"Update the dependencies array to be: [getUserPendingCalls]",{"range":"254","text":"255"},[1500,1502],"[user._id]",[2277,2279],[599,601],"[loadUser]",[3257,3268],"[user, user._id]",[2137,2139],"[petId, roomName]",[2056,2058],[1254,1265],"[params.id, user.name]",[931,933],[1863,1865],"[getUserPendingCalls]"]