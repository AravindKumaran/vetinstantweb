[{"C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\components\\layouts\\AddDoctorDetails.js":"1","C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\pages\\doctor\\PatientListPage.js":"2","C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\index.js":"3","C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\pages\\auth\\ForgotPasswordPage.js":"4","C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\pages\\auth\\ResetPasswordPage.js":"5","C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\pages\\doctor\\HomePage.js":"6","C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\pages\\auth\\LoginPage.js":"7","C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\routing\\PrivateRoute.js":"8","C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\components\\layouts\\NavLinks.js":"9","C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\components\\shared\\UI\\LoadingSpinner.js":"10","C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\pages\\doctor\\Admin.js":"11","C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\pages\\NotFound.js":"12","C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\pages\\auth\\RegisterPage.js":"13","C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\App.js":"14","C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\pages\\doctor\\PrescriptionPage.js":"15","C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\components\\layouts\\Header.js":"16","C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\components\\videoCall\\Participant.js":"17","C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\components\\shared\\UI\\Backdrop.js":"18","C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\context\\use-auth.js":"19","C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\pages\\doctor\\CallLogPage.js":"20","C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\components\\layouts\\Layout.js":"21","C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\components\\videoCall\\Room.js":"22","C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\components\\shared\\Forms\\Select.js":"23","C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\components\\layouts\\DateTimeInput.js":"24","C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\components\\shared\\Forms\\Input.js":"25","C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\pages\\doctor\\ChatPage.js":"26","C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\components\\layouts\\CallLogCard.js":"27","C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\components\\shared\\UI\\Modal.js":"28","C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\components\\shared\\Forms\\PasswordInput.js":"29"},{"size":10688,"mtime":1616063792827,"results":"30","hashOfConfig":"31"},{"size":11146,"mtime":1615815433028,"results":"32","hashOfConfig":"31"},{"size":490,"mtime":1614685344032,"results":"33","hashOfConfig":"31"},{"size":1950,"mtime":1614685344034,"results":"34","hashOfConfig":"31"},{"size":2475,"mtime":1614685344036,"results":"35","hashOfConfig":"31"},{"size":5515,"mtime":1616045493433,"results":"36","hashOfConfig":"31"},{"size":4430,"mtime":1616046007999,"results":"37","hashOfConfig":"31"},{"size":443,"mtime":1614685344045,"results":"38","hashOfConfig":"31"},{"size":869,"mtime":1615807701672,"results":"39","hashOfConfig":"31"},{"size":285,"mtime":1614685344027,"results":"40","hashOfConfig":"31"},{"size":3451,"mtime":1616225505592,"results":"41","hashOfConfig":"31"},{"size":439,"mtime":1614685344033,"results":"42","hashOfConfig":"31"},{"size":4475,"mtime":1614685344035,"results":"43","hashOfConfig":"31"},{"size":1860,"mtime":1616225431148,"results":"44","hashOfConfig":"31"},{"size":4392,"mtime":1615816160838,"results":"45","hashOfConfig":"31"},{"size":354,"mtime":1615807701672,"results":"46","hashOfConfig":"31"},{"size":2923,"mtime":1614685344029,"results":"47","hashOfConfig":"31"},{"size":291,"mtime":1614685344026,"results":"48","hashOfConfig":"31"},{"size":4744,"mtime":1616050877588,"results":"49","hashOfConfig":"31"},{"size":4837,"mtime":1614915367154,"results":"50","hashOfConfig":"31"},{"size":235,"mtime":1614685344020,"results":"51","hashOfConfig":"31"},{"size":2067,"mtime":1614685344030,"results":"52","hashOfConfig":"31"},{"size":688,"mtime":1614685344024,"results":"53","hashOfConfig":"31"},{"size":465,"mtime":1614685344018,"results":"54","hashOfConfig":"31"},{"size":1020,"mtime":1614685344022,"results":"55","hashOfConfig":"31"},{"size":5130,"mtime":1614685344039,"results":"56","hashOfConfig":"31"},{"size":1301,"mtime":1614685344016,"results":"57","hashOfConfig":"31"},{"size":660,"mtime":1614685344029,"results":"58","hashOfConfig":"31"},{"size":1246,"mtime":1614685344023,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1pnpoqo",{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"65"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"65"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"65"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\components\\layouts\\AddDoctorDetails.js",[],"C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\pages\\doctor\\PatientListPage.js",["140"],"import React, { useState, useEffect } from 'react'\r\nimport Layout from 'components/layouts/Layout'\r\nimport client from 'services/client'\r\nimport toast from 'react-hot-toast'\r\nimport { FiMessageCircle, FiVideo } from 'react-icons/fi'\r\n\r\nimport './PatientListPage.css'\r\n\r\nimport { useAuth } from 'context/use-auth'\r\nimport LoadingSpinner from 'components/shared/UI/LoadingSpinner'\r\nimport { FiChevronRight } from 'react-icons/fi'\r\nimport Backdrop from 'components/shared/UI/Backdrop'\r\nimport Modal from 'components/shared/UI/Modal'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst PatientListPage = () => {\r\n  const { user } = useAuth()\r\n  const [patients, setPatients] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n  const [open, setOpen] = useState(false)\r\n  const [currentPatient, setCurrentPatient] = useState()\r\n  const [pet, setPet] = useState(null)\r\n  const [petLoading, setPetLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const getPatients = async () => {\r\n      setLoading(true)\r\n      try {\r\n        const res = await client.get(`/rooms/receiver/${user._id}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        })\r\n        // console.log('Res', res)\r\n        setPatients(res.data.room)\r\n        setLoading(false)\r\n      } catch (error) {\r\n        // console.log(error)\r\n        toast.error('Something Went Wrong! Please try again later!')\r\n        setLoading(false)\r\n      }\r\n    }\r\n    getPatients()\r\n  }, [])\r\n\r\n  const toggleModal = () => {\r\n    setOpen(!open)\r\n  }\r\n\r\n  const handlePatModal = async (pat) => {\r\n    setCurrentPatient(pat)\r\n    toggleModal()\r\n    try {\r\n      setPetLoading(true)\r\n      const petRes = await client.get(`/pets/${pat.petId}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.token}`,\r\n        },\r\n      })\r\n      console.log('PET', petRes)\r\n      setPet(petRes.data.exPet)\r\n      setPetLoading(false)\r\n    } catch (error) {\r\n      toast.error('Something Went Wrong! Please try again later!')\r\n      setPetLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      {loading && <LoadingSpinner asOverlay />}\r\n      {open && <Backdrop toggle={toggleModal} />}\r\n      {open && (\r\n        <Modal\r\n          toggle={toggleModal}\r\n          title={`${currentPatient.senderName}'s Pet Details`}\r\n        >\r\n          <div className='chat-video_wrapper flex-center'>\r\n            <Link\r\n              to={`/video-call/${currentPatient.name}`}\r\n              className='btn flex-center'\r\n            >\r\n              <FiVideo className='icon' />\r\n              Video Call\r\n            </Link>\r\n            <Link\r\n              to={{\r\n                pathname: `/chat/${currentPatient.name}`,\r\n                state: { data: currentPatient },\r\n              }}\r\n              className='btn flex-center'\r\n            >\r\n              <FiMessageCircle className='icon' />\r\n              Chat\r\n            </Link>\r\n          </div>\r\n          {petLoading && <LoadingSpinner asOverlay />}\r\n          {pet && (\r\n            <div className='pet__details'>\r\n              <h5>\r\n                Date: <span>{new Date(pet.createdAt).toLocaleString()}</span>\r\n              </h5>\r\n              <h5>\r\n                Weight: <span>{pet.weight} Kg</span>\r\n              </h5>\r\n\r\n              <h5>\r\n                Gender: <span>{pet.gender}</span>\r\n              </h5>\r\n              <h5>\r\n                Species: <span>{pet.type}</span>\r\n              </h5>\r\n              <h5>\r\n                Breed: <span>{pet.breed}</span>\r\n              </h5>\r\n\r\n              <h5>\r\n                Age:\r\n                <span>\r\n                  {pet.years !== 0 && `${pet.years} Years`}{' '}\r\n                  {pet.months !== 0 && `${pet.months} Months`}\r\n                </span>\r\n              </h5>\r\n\r\n              {pet?.petHistoryImages?.length > 0 && (\r\n                <>\r\n                  <h5>Pet History Images: </h5>\r\n                  <div className='pet__history__images'>\r\n                    {pet.petHistoryImages.map((img, i) => (\r\n                      <div key={`${img}-${i}`} className='pet__history__img'>\r\n                        {/* <img\r\n                          src={`http://192.168.43.242:8000/img/${img}`}\r\n                          width='200'\r\n                          height='200'\r\n                          alt={`${pet.type}`}\r\n                        /> */}\r\n                        <img\r\n                          src={`${img}`}\r\n                          width='200'\r\n                          height='200'\r\n                          style={{ objectFit: 'cover' }}\r\n                          alt={`${pet.type}`}\r\n                        />\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </>\r\n              )}\r\n\r\n              {pet?.prescriptions?.length > 0 && <h5>Pet Prescriptions:</h5>}\r\n              {pet?.prescriptions?.length > 0 &&\r\n                pet.prescriptions.map((pr, i) => (\r\n                  <div className='py-10' key={pr._id}>\r\n                    <h5>\r\n                      {i + 1}. Prescription: <span>{pr.prescription}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Doctor's Name: <span>{pr.docname}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Date: <span>{new Date(pr.date).toLocaleString()}</span>\r\n                    </h5>\r\n                    {pr.img && (\r\n                      <>\r\n                        <h5>Prescription image</h5>\r\n                        <div className='pet__history__img'>\r\n                          {/* <img\r\n                            src={`http://192.168.43.242:8000/${pr.img}`}\r\n                            width='200'\r\n                            height='200'\r\n                            style={{ maxHeight: '200px', maxWidth: '200px' }}\r\n                            alt={`${pet.type}`}\r\n                          /> */}\r\n                          <img\r\n                            src={`${pr.img}`}\r\n                            width='200'\r\n                            height='200'\r\n                            style={{\r\n                              maxHeight: '200px',\r\n                              maxWidth: '200px',\r\n                              objectFit: 'cover',\r\n                            }}\r\n                            alt={`${pet.type}`}\r\n                          />\r\n                        </div>\r\n                      </>\r\n                    )}\r\n                    <hr />\r\n                  </div>\r\n                ))}\r\n\r\n              {pet?.problems?.length > 0 && <h5>Pet Problems: </h5>}\r\n              {pet?.problems?.length > 0 &&\r\n                pet.problems.map((pb, i) => (\r\n                  <div className='pet__problems py-10' key={pb._id}>\r\n                    <h5>\r\n                      {i + 1}. Problem: <span>{pb.problem}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Doctor's Name: <span>{pb.docname}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Time Period: <span>{pb.time}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Appetite: <span>{pb.Appetite}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Behaviour: <span>{pb.Behaviour}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Eyes: <span>{pb.Eyes}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Comment: <span>{pb.comment}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Gait: <span>{pb.Gait}</span>\r\n                    </h5>\r\n                    <h5>\r\n                      Mucous: <span>{pb.Mucous}</span>\r\n                    </h5>\r\n\r\n                    {pb.Ears?.length > 0 && <h5>Ears: </h5>}\r\n\r\n                    {pb.Ears?.length > 0 &&\r\n                      pb.Ears.map((er, i) => <h3 key={`${i}-Ears`}> {er}</h3>)}\r\n\r\n                    {pb.Feces?.length > 0 && <h5>Faces: </h5>}\r\n\r\n                    {pb.Feces?.length > 0 &&\r\n                      pb.Feces.map((fc, i) => (\r\n                        <h3 key={`Feces ${i}`}> {fc}</h3>\r\n                      ))}\r\n                    {pb.Urine?.length > 0 && <h5>Urines: </h5>}\r\n\r\n                    {pb.Urine?.length > 0 &&\r\n                      pb.Urine.map((ur, i) => (\r\n                        <h3 key={`Urines ${i}`}> {ur}</h3>\r\n                      ))}\r\n                    {pb.Skin?.length > 0 && <h5>Skins: </h5>}\r\n\r\n                    {pb.Skin?.length > 0 &&\r\n                      pb.Skin.map((sk, i) => <h3 key={`Skins ${i}`}> {sk}</h3>)}\r\n\r\n                    {pb?.images?.length && <h5>Pet Problem image</h5>}\r\n                    <div className='pet__history__images'>\r\n                      {pb?.images?.length > 0 &&\r\n                        pb.images.map((img, i) => (\r\n                          <div\r\n                            key={`${img}-${i}`}\r\n                            className='pet__history__img'\r\n                          >\r\n                            {/* <img\r\n                              src={`http://192.168.43.242:8000/${img}`}\r\n                              width='200'\r\n                              height='200'\r\n                              style={{ maxHeight: '200px', maxWidth: '200px' }}\r\n                              alt={`${pet.type}`}\r\n                            /> */}\r\n                            <img\r\n                              src={`${img}`}\r\n                              width='200'\r\n                              height='200'\r\n                              style={{\r\n                                maxHeight: '200px',\r\n                                maxWidth: '200px',\r\n                                objectFit: 'cover',\r\n                              }}\r\n                              alt={`${pet.type}`}\r\n                            />\r\n                          </div>\r\n                        ))}\r\n                    </div>\r\n                    <hr />\r\n                  </div>\r\n                ))}\r\n            </div>\r\n          )}\r\n        </Modal>\r\n      )}\r\n      {patients.length === 0 && (\r\n        <h3 className='text-center'>\r\n          No Patients Have Contacted You, Please Comeback After Some Time!\r\n        </h3>\r\n      )}\r\n\r\n      {patients.length > 0 && <h3 className='text-center'>Patients List:</h3>}\r\n      {patients.length > 0 && (\r\n        <div className='pat__grid center'>\r\n          {patients.map((pat) => (\r\n            <div\r\n              key={pat._id}\r\n              className='patient__list'\r\n              onClick={() => handlePatModal(pat)}\r\n            >\r\n              <div className='patient__list__item'>\r\n                <p className='patient__list__item__img'>{pat.senderName[0]}</p>\r\n                <p className='patient__list__item__name'>{pat.senderName}</p>\r\n              </div>\r\n              <FiChevronRight style={{ fontSize: '2.5rem' }} />\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default PatientListPage\r\n\r\n\r\n\r\n\r\n\r\n\r\n",["141","142"],"C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\index.js",[],["143","144"],"C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\pages\\auth\\ForgotPasswordPage.js",[],"C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\pages\\auth\\ResetPasswordPage.js",["145"],"import React, { useEffect, useState, useRef } from 'react'\r\nimport { useForm } from 'react-hook-form'\r\nimport toast from 'react-hot-toast'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\n\r\nimport Button from 'components/shared/Forms/Button'\r\nimport PasswordInput from 'components/shared/Forms/PasswordInput'\r\nimport LoadingSpinner from 'components/shared/UI/LoadingSpinner'\r\n\r\nimport client from 'services/client'\r\n\r\nconst ResetPasswordPage = () => {\r\n  const { handleSubmit, register, errors, watch } = useForm()\r\n  const pass = useRef()\r\n  pass.current = watch('password', '')\r\n  const history = useHistory()\r\n  const params = useParams()\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  const onSubmit = async ({ password }) => {\r\n    try {\r\n      setLoading(true)\r\n      await client.post(`/auth/resetpassword/${params.token}`, { password })\r\n      setLoading(false)\r\n      toast.success('Password Reset Success! Please login')\r\n      setTimeout(() => {\r\n        history.replace('/login')\r\n      }, 2000)\r\n    } catch (error) {\r\n      setLoading(false)\r\n      toast.error(\r\n        error.response?.data.msg || 'Something Went Wrong, Please try again!'\r\n      )\r\n      setTimeout(() => {\r\n        history.replace('/login')\r\n      }, 2000)\r\n    }\r\n  }\r\n  return (\r\n    <div className='center'>\r\n      {loading && <LoadingSpinner asOverlay />}\r\n      <div className='form__wrapper'>\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <h2 className='text-center'>Reset Your Password</h2>\r\n\r\n          <PasswordInput\r\n            label='Password'\r\n            name='password'\r\n            placeholder='********'\r\n            myRef={register({\r\n              required: 'Please enter your password',\r\n              minLength: {\r\n                value: 8,\r\n                message: 'Password must be atleast 8 characters long',\r\n              },\r\n            })}\r\n            error={errors.password}\r\n          />\r\n          <PasswordInput\r\n            label='Repeat Password'\r\n            name='repeatpassword'\r\n            placeholder='********'\r\n            myRef={register({\r\n              validate: (value) =>\r\n                value === pass.current || 'The passwords do not match',\r\n            })}\r\n            error={errors.repeatpassword}\r\n          />\r\n\r\n          <Button classNames='full' type='submit'>\r\n            Reset Password\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ResetPasswordPage\r\n",["146","147"],"C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\pages\\doctor\\HomePage.js",["148","149","150"],"import React, { useEffect, useState } from \"react\";\r\nimport { useAuth } from \"context/use-auth\";\r\nimport client from \"services/client\";\r\nimport toast from \"react-hot-toast\";\r\n\r\nimport Layout from \"components/layouts/Layout\";\r\nimport LoadingSpinner from \"components/shared/UI/LoadingSpinner\";\r\nimport AddDoctorDetails from \"components/layouts/AddDoctorDetails\";\r\n\r\nimport \"./HomePage.css\";\r\nimport socket from \"services/socket\";\r\nimport Admin from '../doctor/Admin';\r\n\r\n\r\nconst HomePage = () => {\r\n  const { loadUser, user } = useAuth();\r\n  const [loading, setLoading] = useState(false);\r\n  const [doctorDetails, setDoctorDetails] = useState();\r\n\r\n  useEffect(() => {\r\n    const data = async () => {\r\n      await loadUser();\r\n      const sendPushToken = async (token, message, status) => {\r\n        setLoading(true);\r\n\r\n        const pushData = {\r\n          targetExpoPushToken: token,\r\n          title: `Response from Dr. ${user.name}`,\r\n          message: message,\r\n          datas: { token: user.token || null, status },\r\n        };\r\n        try {\r\n          await client.post(\"/users/sendNotification\", pushData, {\r\n            headers: {\r\n              Authorization: `Bearer ${localStorage.token}`,\r\n            },\r\n          });\r\n          setLoading(false);\r\n        } catch (err) {\r\n          setLoading(false);\r\n          toast.error(\r\n            err.response?.data.msg || \"Something Went Wrong! Try Again Later\"\r\n          );\r\n        }\r\n      };\r\n      socket.on(\"videoCall\", (data) => {\r\n        console.log(\"SocketData\", data, user);\r\n        if (user) {\r\n          if (data.docId === user?._id && data.paymentDone === false) {\r\n            if (\r\n              window.confirm(\r\n                `Incoming Call Request from pet Owner ${data.name}`\r\n              )\r\n            ) {\r\n              sendPushToken(\r\n                data.token,\r\n                \"Yes I'm available. Complete The Payment Within 5-10 Minutes\",\r\n                \"ok\"\r\n              );\r\n            } else {\r\n              sendPushToken(\r\n                data.token,\r\n                `Sorry! I'm Not Available. Please Try With Other Available Doctors`,\r\n                \"cancel\"\r\n              );\r\n            }\r\n          }\r\n\r\n          if (data.docId === user._id && data.paymentDone === true) {\r\n            alert(\r\n              `Pet Owner ${data.name} Response! \\n I have started the call Please join it.`\r\n            );\r\n          }\r\n        }\r\n      });\r\n    };\r\n    data();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n\r\n  // }, [])\r\n\r\n  useEffect(() => {\r\n    const getDoctorDetails = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const res = await client.get(`/doctors/user/${user._id}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        });\r\n        setDoctorDetails(res.data?.doctor);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        if (err.response?.data?.msg) {\r\n          toast.error(\"Please add your details below\");\r\n        }\r\n\r\n        setLoading(false);\r\n      }\r\n    };\r\n    if (user) {\r\n      getDoctorDetails();\r\n    }\r\n  }, [user?._id]);\r\n\r\n  return (\r\n    <Layout>\r\n      {loading && <LoadingSpinner asOverlay />}\r\n      {user && (\r\n        <h2 className=\"doc__title text-center\">Welcome Doctor {user.name}</h2>\r\n      )}\r\n      {doctorDetails ? (\r\n        <div className=\"doctor\">\r\n          <h4>Details: </h4>\r\n          <div className=\"doctor__card\">\r\n            <h5>Registration Number :</h5>\r\n            <p>{doctorDetails.regNo}</p>\r\n          </div>\r\n          <div className=\"doctor__card\">\r\n            <h5>Phone Number:</h5>\r\n            <p>{doctorDetails.phone}</p>\r\n          </div>\r\n          <div className=\"doctor__card\">\r\n            <h5>Hospital/Clinic Name :</h5>\r\n            <p>{doctorDetails?.hospital?.name}</p>\r\n          </div>\r\n          <div className=\"doctor__card\">\r\n            <h5>Consultation Fees :</h5>\r\n            <p>₹ {doctorDetails.fee}</p>\r\n          </div>\r\n          <div className=\"doctor__card\">\r\n            <h5> Qualifications :</h5>\r\n            <p>{doctorDetails.qlf}</p>\r\n          </div>\r\n\r\n          {+doctorDetails.fee > 0 && (\r\n            <>\r\n              <h4>Billing Details: </h4>\r\n              <div className=\"doctor__card\">\r\n                <h5>Bank Account Number :</h5>\r\n                <p>{doctorDetails.accno}</p>\r\n              </div>\r\n              <div className=\"doctor__card\">\r\n                <h5>Account Holder Name :</h5>\r\n                <p>{doctorDetails.accname}</p>\r\n              </div>\r\n              <div className=\"doctor__card\">\r\n                <h5>Account Type :</h5>\r\n                <p>{doctorDetails.acctype}</p>\r\n              </div>\r\n              <div className=\"doctor__card\">\r\n                <h5>IFSC Code :</h5>\r\n                <p>{doctorDetails.ifsc}</p>\r\n              </div>\r\n            </>\r\n          )}\r\n\r\n          <div className=\"doctor__card\">\r\n            <h5>Registration Certificate :</h5>\r\n            <a\r\n              style={{ cursor: \"pointer\" }}\r\n              href={doctorDetails.file}\r\n              target=\"_blank\"\r\n            >\r\n              {doctorDetails.file.split(\"/documents/\")[1]}\r\n            </a>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <h3 className=\"text-center py-10\">Add Your Details Below!</h3>\r\n          <AddDoctorDetails />\r\n        </>\r\n      )}\r\n      {/* <Admin /> */}\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n",["151","152"],"C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\pages\\auth\\LoginPage.js",["153"],"import React, { useEffect, useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport toast from \"react-hot-toast\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { FcGoogle } from \"react-icons/fc\";\r\n\r\nimport Button from \"components/shared/Forms/Button\";\r\nimport Input from \"components/shared/Forms/Input\";\r\nimport PasswordInput from \"components/shared/Forms/PasswordInput\";\r\nimport LoadingSpinner from \"components/shared/UI/LoadingSpinner\";\r\n\r\nimport { useAuth } from \"context/use-auth\";\r\nimport { GoogleLogin } from \"react-google-login\";\r\nimport client from \"services/client\";\r\nimport Admin from \"../doctor/Admin\";\r\n\r\nconst LoginPage = () => {\r\n  const { handleSubmit, register, errors } = useForm();\r\n  const {\r\n    loginUser,\r\n    error,\r\n    clearErrors,\r\n    isAuthenticated,\r\n    loadUser,\r\n    loading: cLoading,\r\n  } = useAuth();\r\n  const history = useHistory();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (isAuthenticated) {\r\n      // setAuthToken(localStorage.token)\r\n      history.replace(\"/\");\r\n    }\r\n\r\n    if (error) {\r\n      toast.error(error);\r\n      clearErrors();\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n  }, [error, isAuthenticated]);\r\n\r\n  const onSubmit = ({ email, password }) => {\r\n    // console.log('cliekd')\r\n    loginUser({\r\n      emailID: email,\r\n      password,\r\n    });\r\n    clearErrors();\r\n  };\r\n\r\n  const handleGoogleAuth = async (res) => {\r\n    console.log(\"Ress\", res.profileObj);\r\n    try {\r\n      setLoading(true);\r\n      const password = res.profileObj.googleId + Date.now();\r\n      const googleRes = await client.post(\"/auth/saveGoogle\", {\r\n        name: res.profileObj.name,\r\n        emailID: res.profileObj.email,\r\n        password: password,\r\n        role: \"doctor\",\r\n      });\r\n      localStorage.setItem(\"token\", googleRes.data.token);\r\n      loadUser();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.log(\"Error\", error);\r\n      toast.error(\"Something Went Wrong! Please try after some time\");\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"center\">\r\n      {(loading || cLoading) && <LoadingSpinner asOverlay />}\r\n      <div className=\"form__wrapper\">\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <h2 className=\"text-center\">Welcome</h2>\r\n\r\n          <Input\r\n            label=\"Email\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            placeholder=\"john@gmail.com\"\r\n            myRef={register({\r\n              required: \"Please enter your email\",\r\n              pattern: {\r\n                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\r\n                message: \"invalid email address\",\r\n              },\r\n            })}\r\n            error={errors.email}\r\n          />\r\n\r\n          <div className=\"forgot__wrapper\">\r\n            <PasswordInput\r\n              label=\"Password\"\r\n              name=\"password\"\r\n              placeholder=\"********\"\r\n              myRef={register({\r\n                required: \"Please enter your password\",\r\n                minLength: {\r\n                  value: 8,\r\n                  message: \"Password must be atleast 8 characters long\",\r\n                },\r\n              })}\r\n              error={errors.password}\r\n            />\r\n\r\n            <Link className=\"forgot\" to=\"/forgotPassword\">\r\n              Forgot Password?\r\n            </Link>\r\n          </div>\r\n\r\n          <Button classNames=\"full\" type=\"submit\">\r\n            Login\r\n          </Button>\r\n        </form>\r\n\r\n        <hr />\r\n\r\n        <GoogleLogin\r\n          clientId=\"320113619885-gk7d3v66vs3bf4nksn6mf3tj2s6prgcs.apps.googleusercontent.com\"\r\n          buttonText=\"Login With Google\"\r\n          onSuccess={handleGoogleAuth}\r\n          // onFailure={handleGoogleAuth}\r\n          cookiePolicy={\"single_host_origin\"}\r\n          render={(renderProps) => (\r\n            <button onClick={renderProps.onClick} className=\"google_btn\">\r\n              <div className=\"flex-center\">\r\n                <FcGoogle style={{ fontSize: \"2.5rem\" }} />\r\n                <span className=\"google__text\">Login With Google</span>\r\n              </div>\r\n            </button>\r\n          )}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"flex-sbt py-10\">\r\n        <span>Don't have an account?</span>\r\n\r\n        <Link to=\"/register\" className=\"btn\">\r\n          Register\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n",["154","155"],"C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\routing\\PrivateRoute.js",["156"],"import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport { useAuth } from 'context/use-auth'\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => {\r\n  const { isAuthenticated, loading } = useAuth()\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        !isAuthenticated ? <Redirect to='/login' /> : <Component {...props} />\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nexport default PrivateRoute\r\n","C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\components\\layouts\\NavLinks.js",[],"C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\components\\shared\\UI\\LoadingSpinner.js",[],["157","158"],"C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\pages\\doctor\\Admin.js",["159","160","161","162","163","164"],"C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\pages\\NotFound.js",[],["165","166"],"C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\pages\\auth\\RegisterPage.js",[],"C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\App.js",["167"],"C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\pages\\doctor\\PrescriptionPage.js",["168"],"import React, { useEffect, useState } from 'react'\r\nimport * as Yup from 'yup'\r\nimport { useForm } from 'react-hook-form'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport { useAuth } from 'context/use-auth'\r\nimport toast from 'react-hot-toast'\r\nimport Layout from 'components/layouts/Layout'\r\n\r\nimport './PrescriptionPage.css'\r\nimport LoadingSpinner from 'components/shared/UI/LoadingSpinner'\r\nimport Select from 'components/shared/Forms/Select'\r\nimport Input from 'components/shared/Forms/Input'\r\nimport Button from 'components/shared/Forms/Button'\r\nimport client from 'services/client'\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  patientName: Yup.string()\r\n    .required('Please select a patient')\r\n    .label('Patient Name'),\r\n  prescription: Yup.string().max(300).required().label('Prescription'),\r\n  photo: Yup.mixed()\r\n    .test(\r\n      'imageSize',\r\n      'Please select a .jpeg/.jpg image of size less than 1 Mb',\r\n      (value) => {\r\n        if (value && value[0].type !== 'image/jpeg') {\r\n          return false\r\n        }\r\n        return value && value[0].size <= 1000000\r\n      }\r\n    )\r\n    .label('Image'),\r\n})\r\n\r\nconst PrescriptionPage = () => {\r\n  const { handleSubmit, register, errors } = useForm({\r\n    resolver: yupResolver(validationSchema),\r\n  })\r\n\r\n  const { user } = useAuth()\r\n  const [patients, setPatients] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const getPatients = async () => {\r\n      setLoading(true)\r\n      try {\r\n        const res = await client.get(`/rooms/receiver/${user._id}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        })\r\n        let pateintss = res.data.room\r\n        let newPatients = pateintss.reduce((acc, item) => {\r\n          acc.push({\r\n            label:\r\n              item.senderName.charAt(0).toUpperCase() +\r\n              item.senderName.slice(1),\r\n            value: item.petId,\r\n          })\r\n          return acc\r\n        }, [])\r\n        setPatients(newPatients)\r\n        setLoading(false)\r\n      } catch (error) {\r\n        // console.log(error)\r\n        toast.error('Something Went Wrong! Please try again later!')\r\n        setLoading(false)\r\n      }\r\n    }\r\n    getPatients()\r\n  }, [])\r\n\r\n  const onSubmit = async (data) => {\r\n    const formData = new FormData()\r\n    if (data.photo[0]) {\r\n      formData.append('photo', data.photo[0])\r\n    }\r\n    formData.append('prescription', data.prescription)\r\n    formData.append('docname', user.name)\r\n    for (var key of formData.entries()) {\r\n      console.log(key[0] + ', ' + key[1])\r\n    }\r\n\r\n    try {\r\n      setLoading(true)\r\n      const petRes = await client.patch(\r\n        `/pets/prescription/${data.patientName}`,\r\n        formData,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        }\r\n      )\r\n      console.log('PetRes', petRes)\r\n      toast.success('Prescription Send Successfully!')\r\n      setLoading(false)\r\n    } catch (error) {\r\n      console.log('Error', error)\r\n      toast.error('Something Went Wrong! Please try again later!')\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <div className='center'>\r\n        {loading && <LoadingSpinner asOverlay />}\r\n        <div className='prescription'>\r\n          <h3 className='text-center'> Please Provide Your Prescription </h3>\r\n          <form onSubmit={handleSubmit(onSubmit)}>\r\n            <Select\r\n              label='Select Patient Name'\r\n              data={patients}\r\n              name='patientName'\r\n              myRef={register}\r\n              error={errors.patientName}\r\n            />\r\n            <Input\r\n              label='Prescription'\r\n              placeholder='Enter your prescription'\r\n              element='textarea'\r\n              rows={5}\r\n              name='prescription'\r\n              myRef={register}\r\n              error={errors.prescription}\r\n            />\r\n            <Input\r\n              type='file'\r\n              label='Select image'\r\n              name='photo'\r\n              myRef={register}\r\n              error={errors.photo}\r\n            />\r\n            <Button classNames='full' type='submit'>\r\n              Send Prescription\r\n            </Button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default PrescriptionPage","C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\components\\layouts\\Header.js",[],["169","170"],"C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\components\\videoCall\\Participant.js",["171","172","173","174","175"],"import Button from 'components/shared/Forms/Button'\r\nimport React, { useState, useEffect, useRef } from 'react'\r\n\r\nimport { FiMic, FiMicOff } from 'react-icons/fi'\r\n\r\nconst Participant = ({ participant }) => {\r\n  const [videoTracks, setVideoTracks] = useState([])\r\n  const [audioTracks, setAudioTracks] = useState([])\r\n  const [muteAudio, setMuteAudio] = useState(true)\r\n\r\n  const videoRef = useRef()\r\n  const audioRef = useRef()\r\n\r\n  const trackpubsToTracks = (trackMap) =>\r\n    Array.from(trackMap.values())\r\n      .map((publication) => publication.track)\r\n      .filter((track) => track !== null)\r\n\r\n  useEffect(() => {\r\n    setVideoTracks(trackpubsToTracks(participant.videoTracks))\r\n    setAudioTracks(trackpubsToTracks(participant.audioTracks))\r\n\r\n    const trackSubscribed = (track) => {\r\n      if (track.kind === 'video') {\r\n        setVideoTracks((videoTracks) => [...videoTracks, track])\r\n      } else if (track.kind === 'audio') {\r\n        setAudioTracks((audioTracks) => [...audioTracks, track])\r\n      }\r\n    }\r\n\r\n    const trackUnsubscribed = (track) => {\r\n      if (track.kind === 'video') {\r\n        setVideoTracks((videoTracks) => videoTracks.filter((v) => v !== track))\r\n      } else if (track.kind === 'audio') {\r\n        setAudioTracks((audioTracks) => audioTracks.filter((a) => a !== track))\r\n      }\r\n    }\r\n\r\n    participant.on('trackSubscribed', trackSubscribed)\r\n    participant.on('trackUnsubscribed', trackUnsubscribed)\r\n\r\n    return () => {\r\n      setVideoTracks([])\r\n      setAudioTracks([])\r\n      participant.removeAllListeners()\r\n    }\r\n  }, [participant])\r\n\r\n  useEffect(() => {\r\n    const videoTrack = videoTracks[0]\r\n    if (videoTrack) {\r\n      videoTrack.attach(videoRef.current)\r\n      return () => {\r\n        videoTrack.detach()\r\n      }\r\n    }\r\n  }, [videoTracks])\r\n\r\n  useEffect(() => {\r\n    const audioTrack = audioTracks[0]\r\n    if (audioTrack) {\r\n      audioTrack.attach(audioRef.current)\r\n      return () => {\r\n        audioTrack.detach()\r\n      }\r\n    }\r\n  }, [audioTracks])\r\n\r\n  // const handleMuteAudio = () => {\r\n  //   setMuteAudio(!muteAudio)\r\n  //   console.log('Muting')\r\n  //   if (videoRef.current) {\r\n  //     videoRef.current.muted = muteAudio\r\n  //     videoRef.current.defaultMuted = muteAudio\r\n  //   }\r\n  //   console.log(videoRef.current)\r\n  // }\r\n\r\n  return (\r\n    <div className='participant'>\r\n      <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n        <h3>{participant.identity}</h3>\r\n        <video ref={videoRef} autoPlay={true} />\r\n        <audio ref={audioRef} autoPlay={true} />\r\n        {/* <audio ref={audioRef} autoPlay={true} muted={muteAudio} /> */}\r\n        {/* <div onClick={handleMuteAudio}>\r\n          {muteAudio ? (\r\n            <FiMic className='call-icons' />\r\n          ) : (\r\n            <FiMicOff className='call-icons' />\r\n          )}\r\n        </div> */}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Participant\r\n",["176","177"],"C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\components\\shared\\UI\\Backdrop.js",[],"C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\context\\use-auth.js",[],"C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\pages\\doctor\\CallLogPage.js",["178","179"],"import React, { useState, useEffect } from 'react'\r\nimport Layout from 'components/layouts/Layout'\r\n\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport './CallLogPage.css'\r\nimport client from 'services/client'\r\nimport { useAuth } from 'context/use-auth'\r\nimport LoadingSpinner from 'components/shared/UI/LoadingSpinner'\r\nimport CallLogCard from 'components/layouts/CallLogCard'\r\nimport toast from 'react-hot-toast'\r\n\r\nimport Backdrop from 'components/shared/UI/Backdrop'\r\nimport Modal from 'components/shared/UI/Modal'\r\n\r\nimport DatePicker from 'react-datepicker'\r\nimport DateTimeInput from 'components/layouts/DateTimeInput'\r\nimport Button from 'components/shared/Forms/Button'\r\n\r\nconst CallLogPage = () => {\r\n  const { user } = useAuth()\r\n  const [missedCall, setMissedCall] = useState([])\r\n  const [completedCall, setCompletedCall] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n  const [open, setOpen] = useState(false)\r\n  const [currentCall, setCurrentCall] = useState()\r\n  const [startDate, setStartDate] = useState(new Date())\r\n  const [startTime, setStartTime] = useState(new Date())\r\n\r\n  useEffect(() => {\r\n    const getMissedCall = async () => {\r\n      setLoading(true)\r\n      try {\r\n        const res = await client.get(`/calllogs?receiverId=${user._id}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        })\r\n\r\n        const callLogsArray = res.data.callLogs\r\n        callLogsArray.forEach((log) => {\r\n          if (log.callPending) {\r\n            setMissedCall((prevLog) => [...prevLog, log])\r\n          } else {\r\n            setCompletedCall((prevLog) => [...prevLog, log])\r\n          }\r\n        })\r\n        setLoading(false)\r\n      } catch (error) {\r\n        setLoading(false)\r\n        toast.error(\r\n          error.response.data?.msg ||\r\n            'Something Went Wrong! Please try again later!'\r\n        )\r\n      }\r\n    }\r\n\r\n    getMissedCall()\r\n  }, [])\r\n\r\n  const toggleModal = () => {\r\n    setOpen(!open)\r\n  }\r\n\r\n  const handleScheduleCall = (call) => {\r\n    toggleModal()\r\n    setCurrentCall(call)\r\n  }\r\n\r\n  const handleScheduleBtn = async () => {\r\n    startDate.setTime(startTime.getTime())\r\n    setLoading(true)\r\n    try {\r\n      const schRes = await client.post(\r\n        '/scheduledCalls',\r\n        {\r\n          date: startDate,\r\n          userId: currentCall.senderId._id,\r\n          doctorId: currentCall.receiverId._id,\r\n          doctorName: currentCall.receiverId.name,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        }\r\n      )\r\n\r\n      setLoading(false)\r\n      toast.success('Your Call has been schedule')\r\n      window.location.href = '/'\r\n    } catch (error) {\r\n      setLoading(false)\r\n      toast.error(\r\n        error.response.data?.msg ||\r\n          'Something Went Wrong! Please try again later!'\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      {loading && <LoadingSpinner asOverlay />}\r\n      {open && <Backdrop toggle={toggleModal} />}\r\n      {open && (\r\n        <Modal toggle={toggleModal} title='Schedule Call'>\r\n          <div className='sch__modal'>\r\n            <h4>Select Time</h4>\r\n            <DatePicker\r\n              selected={startTime}\r\n              onChange={(date) => setStartTime(date)}\r\n              showTimeSelect\r\n              showTimeSelectOnly\r\n              timeIntervals={15}\r\n              timeCaption='Time'\r\n              dateFormat='h:mm aa'\r\n              customInput={<DateTimeInput time={true} />}\r\n            />\r\n            \r\n            <h4>Choose Date</h4>\r\n            <DatePicker\r\n              selected={startDate}\r\n              onChange={(date) => setStartDate(date)}\r\n              minDate={new Date()}\r\n              customInput={<DateTimeInput />}\r\n            />\r\n          </div>\r\n          <Button onClick={handleScheduleBtn} classNames='btn__sch'>\r\n            Schedule\r\n          </Button>\r\n        </Modal>\r\n      )}\r\n      <div className='call-log__container'>\r\n        <div className='missed__call call__common'>\r\n          <h2 className='text-center'>Missed Calls</h2>\r\n          {missedCall.length > 0 ? (\r\n            <CallLogCard\r\n              callLogs={missedCall}\r\n              isSchedule={true}\r\n              onSchedule={handleScheduleCall}\r\n            />\r\n          ) : (\r\n            <h4 className='text-center'>No Missed Calls</h4>\r\n          )}\r\n        </div>\r\n        <div className='completed__call call__common'>\r\n          <h2 className='text-center'>Completed Calls</h2>\r\n          {completedCall.length > 0 ? (\r\n            <CallLogCard callLogs={completedCall} />\r\n          ) : (\r\n            <h4 className='text-center'>No Completed Calls</h4>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default CallLogPage\r\n",["180","181"],"C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\components\\layouts\\Layout.js",[],["182","183"],"C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\components\\videoCall\\Room.js",[],"C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\components\\shared\\Forms\\Select.js",[],["184","185"],"C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\components\\layouts\\DateTimeInput.js",[],"C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\components\\shared\\Forms\\Input.js",[],"C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\pages\\doctor\\ChatPage.js",["186","187"],"import React, { useState, useEffect } from 'react'\r\nimport Layout from 'components/layouts/Layout'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { useForm } from 'react-hook-form'\r\n\r\nimport Input from 'components/shared/Forms/Input'\r\nimport Button from 'components/shared/Forms/Button'\r\nimport LoadingSpinner from 'components/shared/UI/LoadingSpinner'\r\nimport { FiSend } from 'react-icons/fi'\r\nimport { useAuth } from 'context/use-auth'\r\nimport socket from 'services/socket'\r\nimport { nanoid } from 'nanoid'\r\n\r\nimport './ChatPage.css'\r\nimport client from 'services/client'\r\nimport toast from 'react-hot-toast'\r\n\r\nconst ChatPage = () => {\r\n  const { user } = useAuth()\r\n  const { handleSubmit, register, reset } = useForm()\r\n  const [messages, setMessages] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n  const loc = useLocation()\r\n  const { name: roomName, petId, senderName } = loc.state?.data\r\n\r\n  useEffect(() => {\r\n    const getAllChats = async () => {\r\n      setLoading(true)\r\n      try {\r\n        const chatRes = await client.get(`/chats/room/${roomName}/${petId}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.token}`,\r\n          },\r\n        })\r\n        // console.log('Res', chatRes)\r\n        // const sortedChat = chatRes.data.chats.sort(\r\n        //   (a, b) => new Date(a.createdAt) - new Date(b.createdAt)\r\n        // )\r\n        const newMessages = chatRes.data.chats.map((msg) => {\r\n          return {\r\n            ...msg,\r\n            user: {\r\n              _id: msg.userId,\r\n              name: msg.userName,\r\n            },\r\n          }\r\n        })\r\n        setMessages(newMessages)\r\n        setLoading(false)\r\n\r\n        socket.emit('room', roomName)\r\n        socket.on('chat', (data) => {\r\n          // console.log('Data', sortedData)\r\n          setMessages(data)\r\n        })\r\n      } catch (error) {\r\n        console.log('Error', error)\r\n        setLoading(false)\r\n        toast.error(\r\n          error.response?.data?.msg || 'Something went wrong! Please try again!'\r\n        )\r\n      }\r\n    }\r\n\r\n    getAllChats()\r\n    // console.log('Socket', socket)\r\n  }, [])\r\n\r\n  const handleSendMessage = async ({ msg }) => {\r\n    // console.log('Mssd', msg)\r\n    const newMsg = {\r\n      text: msg,\r\n      roomName: roomName,\r\n      petId: petId,\r\n      userId: user._id,\r\n      userName: user.name,\r\n    }\r\n\r\n    // console.log('NewMsg', newMsg)\r\n\r\n    try {\r\n      setLoading(true)\r\n      const res = await client.post('/chats', newMsg, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.token}`,\r\n        },\r\n      })\r\n      console.log('ResPost', res.data.newChat)\r\n      const chat = res.data.newChat\r\n      chat.user = {\r\n        _id: chat.userId,\r\n        name: chat.userName,\r\n      }\r\n      setLoading(false)\r\n      const allMsg = [...messages, chat].sort(\r\n        (a, b) => new Date(b.createdAt) - new Date(a.createdAt)\r\n      )\r\n      socket.emit('chat', {\r\n        room: roomName,\r\n        msg: allMsg,\r\n      })\r\n    } catch (error) {\r\n      setLoading(false)\r\n      toast.error(\r\n        error.response?.data.msg || 'Something went wrong! Please try again!'\r\n      )\r\n    }\r\n\r\n    reset()\r\n  }\r\n  return (\r\n    <Layout>\r\n      {loading && <LoadingSpinner asOverlay />}\r\n      <div className='chat center'>\r\n        <div className='chat__container'>\r\n          <h2 className='text-center py-10'>Chatting With {senderName}</h2>\r\n          <div className='chat__messages'>\r\n            {messages.length > 0 &&\r\n              messages.map((msg) => (\r\n                <div\r\n                  key={msg._id}\r\n                  className={\r\n                    msg.userId === user._id\r\n                      ? 'chat__messages__local'\r\n                      : 'chat__messages__remote'\r\n                  }\r\n                >\r\n                  <div className=' message'>\r\n                    <p\r\n                      className={\r\n                        msg.userId === user._id ? 'local__msg' : 'remote__msg'\r\n                      }\r\n                    >\r\n                      {msg.text}\r\n                    </p>\r\n                    <p className='msg__date__time'>\r\n                      {new Date(msg.createdAt).toLocaleDateString()}\r\n                    </p>\r\n                    <p className='msg__date__time'>\r\n                      {new Date(msg.createdAt).toLocaleTimeString()}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n          </div>\r\n          <form onSubmit={handleSubmit(handleSendMessage)}>\r\n            <div className='chat__input'>\r\n              <Input\r\n                element='textarea'\r\n                placeholder='Enter your message'\r\n                name='msg'\r\n                rows={2}\r\n                myRef={register({\r\n                  required: 'Please enter your message',\r\n                })}\r\n                // error={errors.msg}\r\n              />\r\n              <Button>\r\n                <FiSend />\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default ChatPage\r\n","C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\components\\layouts\\CallLogCard.js",[],["188","189"],"C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\components\\shared\\UI\\Modal.js",[],"C:\\Users\\Tamilvanan\\Desktop\\Project2\\vetinstantweb\\src\\components\\shared\\Forms\\PasswordInput.js",[],{"ruleId":"190","severity":1,"message":"191","line":44,"column":6,"nodeType":"192","endLine":44,"endColumn":8,"suggestions":"193"},{"ruleId":"194","replacedBy":"195"},{"ruleId":"196","replacedBy":"197"},{"ruleId":"194","replacedBy":"198"},{"ruleId":"196","replacedBy":"199"},{"ruleId":"200","severity":1,"message":"201","line":1,"column":17,"nodeType":"202","messageId":"203","endLine":1,"endColumn":26},{"ruleId":"194","replacedBy":"204"},{"ruleId":"196","replacedBy":"205"},{"ruleId":"200","severity":1,"message":"206","line":12,"column":8,"nodeType":"202","messageId":"203","endLine":12,"endColumn":13},{"ruleId":"190","severity":1,"message":"207","line":107,"column":6,"nodeType":"192","endLine":107,"endColumn":17,"suggestions":"208"},{"ruleId":"209","severity":1,"message":"210","line":166,"column":15,"nodeType":"211","endLine":166,"endColumn":30},{"ruleId":"194","replacedBy":"212"},{"ruleId":"196","replacedBy":"213"},{"ruleId":"200","severity":1,"message":"206","line":15,"column":8,"nodeType":"202","messageId":"203","endLine":15,"endColumn":13},{"ruleId":"194","replacedBy":"214"},{"ruleId":"196","replacedBy":"215"},{"ruleId":"200","severity":1,"message":"216","line":6,"column":28,"nodeType":"202","messageId":"203","endLine":6,"endColumn":35},{"ruleId":"194","replacedBy":"217"},{"ruleId":"196","replacedBy":"218"},{"ruleId":"200","severity":1,"message":"219","line":1,"column":38,"nodeType":"202","messageId":"203","endLine":1,"endColumn":44},{"ruleId":"200","severity":1,"message":"220","line":2,"column":8,"nodeType":"202","messageId":"203","endLine":2,"endColumn":14},{"ruleId":"200","severity":1,"message":"216","line":11,"column":10,"nodeType":"202","messageId":"203","endLine":11,"endColumn":17},{"ruleId":"200","severity":1,"message":"221","line":12,"column":10,"nodeType":"202","messageId":"203","endLine":12,"endColumn":19},{"ruleId":"190","severity":1,"message":"207","line":37,"column":6,"nodeType":"192","endLine":37,"endColumn":17,"suggestions":"222"},{"ruleId":"200","severity":1,"message":"223","line":67,"column":9,"nodeType":"202","messageId":"203","endLine":67,"endColumn":25},{"ruleId":"194","replacedBy":"224"},{"ruleId":"196","replacedBy":"225"},{"ruleId":"190","severity":1,"message":"226","line":26,"column":6,"nodeType":"192","endLine":26,"endColumn":8,"suggestions":"227"},{"ruleId":"190","severity":1,"message":"191","line":72,"column":6,"nodeType":"192","endLine":72,"endColumn":8,"suggestions":"228"},{"ruleId":"194","replacedBy":"229"},{"ruleId":"196","replacedBy":"230"},{"ruleId":"200","severity":1,"message":"231","line":1,"column":8,"nodeType":"202","messageId":"203","endLine":1,"endColumn":14},{"ruleId":"200","severity":1,"message":"232","line":4,"column":10,"nodeType":"202","messageId":"203","endLine":4,"endColumn":15},{"ruleId":"200","severity":1,"message":"233","line":4,"column":17,"nodeType":"202","messageId":"203","endLine":4,"endColumn":25},{"ruleId":"200","severity":1,"message":"234","line":9,"column":10,"nodeType":"202","messageId":"203","endLine":9,"endColumn":19},{"ruleId":"200","severity":1,"message":"235","line":9,"column":21,"nodeType":"202","messageId":"203","endLine":9,"endColumn":33},{"ruleId":"194","replacedBy":"236"},{"ruleId":"196","replacedBy":"237"},{"ruleId":"190","severity":1,"message":"191","line":58,"column":6,"nodeType":"192","endLine":58,"endColumn":8,"suggestions":"238"},{"ruleId":"200","severity":1,"message":"239","line":73,"column":13,"nodeType":"202","messageId":"203","endLine":73,"endColumn":19},{"ruleId":"194","replacedBy":"240"},{"ruleId":"196","replacedBy":"241"},{"ruleId":"194","replacedBy":"242"},{"ruleId":"196","replacedBy":"243"},{"ruleId":"194","replacedBy":"244"},{"ruleId":"196","replacedBy":"245"},{"ruleId":"200","severity":1,"message":"246","line":12,"column":10,"nodeType":"202","messageId":"203","endLine":12,"endColumn":16},{"ruleId":"190","severity":1,"message":"247","line":67,"column":6,"nodeType":"192","endLine":67,"endColumn":8,"suggestions":"248"},{"ruleId":"194","replacedBy":"249"},{"ruleId":"196","replacedBy":"250"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user._id'. Either include it or remove the dependency array.","ArrayExpression",["251"],"no-native-reassign",["252"],"no-negated-in-lhs",["253"],["252"],["253"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar",["252"],["253"],"'Admin' is defined but never used.","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["254"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute",["252"],["253"],["252"],["253"],"'loading' is assigned a value but never used.",["252"],["253"],"'useRef' is defined but never used.","'styled' is defined but never used.","'hospitals' is assigned a value but never used.",["255"],"'handleGoogleAuth' is assigned a value but never used.",["252"],["253"],"React Hook useEffect has a missing dependency: 'loadUser'. Either include it or remove the dependency array.",["256"],["257"],["252"],["253"],"'Button' is defined but never used.","'FiMic' is defined but never used.","'FiMicOff' is defined but never used.","'muteAudio' is assigned a value but never used.","'setMuteAudio' is assigned a value but never used.",["252"],["253"],["258"],"'schRes' is assigned a value but never used.",["252"],["253"],["252"],["253"],["252"],["253"],"'nanoid' is defined but never used.","React Hook useEffect has missing dependencies: 'petId' and 'roomName'. Either include them or remove the dependency array.",["259"],["252"],["253"],{"desc":"260","fix":"261"},"no-global-assign","no-unsafe-negation",{"desc":"262","fix":"263"},{"desc":"262","fix":"264"},{"desc":"265","fix":"266"},{"desc":"260","fix":"267"},{"desc":"260","fix":"268"},{"desc":"269","fix":"270"},"Update the dependencies array to be: [user._id]",{"range":"271","text":"272"},"Update the dependencies array to be: [user, user._id]",{"range":"273","text":"274"},{"range":"275","text":"274"},"Update the dependencies array to be: [loadUser]",{"range":"276","text":"277"},{"range":"278","text":"272"},{"range":"279","text":"272"},"Update the dependencies array to be: [petId, roomName]",{"range":"280","text":"281"},[1500,1502],"[user._id]",[3148,3159],"[user, user._id]",[1138,1149],[973,975],"[loadUser]",[2277,2279],[1955,1957],[2137,2139],"[petId, roomName]"]